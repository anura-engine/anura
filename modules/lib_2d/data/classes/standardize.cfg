{

//Cast to Point2d. (Returns a standard "point" object from a variety of sources.)
toPoints: "def([object|map|[decimal]] points) map(points, toPoint(value))",
toPoint: "overload(
	def(object point)    Point2d <- [point.mid_x, point.mid_y],
	def(map point)       Point2d <- [
		lib.math.default(decimal|null <- point.mid_x, decimal|null <- point.x), 
		lib.math.default(decimal|null <- point.mid_y, decimal|null <- point.y) ],
	def([decimal] point) Point2d <- point,
)",

to_point:  "def( object|map|[decimal]  pt) lib.standardize.toPoint(pt)", //Todo: Change all calls of toPoint to to_point.
to_points: "def([object|map|[decimal]] pt) lib.standardize.toPoints(pt)",
to_int_point: "def(object|map|[decimal] pt) -> [int, int] map(lib.standardize.toPoint(pt), round(value))",


//Returns the midpoint of the camera as a Point2d.
camera: "def(level level) -> Point2d [
	cam[0]+cam[2]/2-in_editor*130, //In_editor is a bit of a hack, an offset to compensate for the side-bar.
	cam[1]+cam[3]/2+in_editor*20
] where cam = [int, int, int, int] <- level.camera_position,
        in_editor = int <- if(level.in_editor, 1, 0)",
        
        
//Set the camera midpoint to a position from a Point2d.
set_camera: "def(level level, Point2d pos) -> commands 
	set(level.camera_position, [
		(pos[0]-(int <- level.camera_position[2])/2), 
		(pos[1]-(int <- level.camera_position[3])/2)] )",
		

//If the camera was not scripted to move somewhere, and it was at rest, where would it be centered?
//Returns a Point2d.        
natural_camera: "def(level level) -> Point2d [
	cam[0]+cam[2]/2-in_editor*130, //In_editor is a bit of a hack, an offset to compensate for the side-bar.
	cam[1]+cam[3]/2+in_editor*20
] where cam = [int, int, int, int] <- ([int, int] <- map(level.camera_target, (int <- value)/100)) + ([int, int] <- level.camera_position[2:4]),
        in_editor = int <- if(level.in_editor, 1, 0)",


//Cast to "decimal".
//This, and int, was made to patch old math that assumed you could subtract 1.0 from true to get 0.0.
decimal: "overload( 
	def(int     v) -> decimal decimal(v),
	def(decimal v) -> decimal v,
	def(any     v) -> decimal if(v,1.0,0.0) asserting v!=null
)",

//Cast to "integer".
int: "overload(
	def(int     v) -> int v,
	def(decimal v) -> int lib.math.round(v),
	def(any     v) -> int if(v,1,0)
)",

rect_to_xy: "overload(
	def(Rect a) -> Rect [a[0],a[1],a[0]+a[2],a[1]+a[3]], //Because the types are the same form, we can't use the type system to overload here.
	def(custom_obj a) -> Rect [a.x,a.y,a.x+a.img_w,a.y+a.img_h]
)",
rect_to_wh: "overload(
	def(Rect a) -> Rect [a[0],a[1],a[2]-a[0],a[3]-a[1]],
	def(custom_obj a) -> Rect [a.x,a.y,a.x,a.y]
)",

tail: "def([any] list) -> [any] if(size(list), list[1:size(list)], [])",

degrees_to_radians: "def(decimal a) -> decimal a/57.2957795",
radians_to_degrees: "def(decimal a) -> decimal a*57.2957795",

test: [{
	assert: "lib.standardize.rect_to_wh(lib.standardize.rect_to_xy(rect)) = rect where rect = [2,2,3,4]",
}],

}
