{
	instances: [
	{
		name: "zoom_effect",
		new: true,

		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",

		fragment: "
			uniform sampler2D u_anura_tex_map;
			uniform vec4 u_anura_draw_area;
			uniform vec4 u_source_area;
			uniform vec4 u_dest_area;
			uniform vec4 u_flat_color;
			uniform float u_flat_color_mix;
			uniform float u_alpha;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				float xpos = (clamp(v_texcoord[0], u_dest_area[0], u_dest_area[2]) - u_dest_area[0])/(u_dest_area[2] - u_dest_area[0]);
				float ypos = (clamp(v_texcoord[1], u_dest_area[1], u_dest_area[3]) - u_dest_area[1])/(u_dest_area[3] - u_dest_area[1]);
				
				vec2 pos = vec2(mix(u_source_area[0], u_source_area[2], xpos),
				                mix(u_source_area[1], u_source_area[3], ypos));
				gl_FragColor = texture2D(u_anura_tex_map, pos);
				gl_FragColor[3] *= u_alpha;

				gl_FragColor = mix(gl_FragColor, u_flat_color, u_flat_color_mix);
			}
		",

		create: "set(uniform_commands.u_use_flat_color, true)",

		draw: "if(controller != null, [
			set(uniform_commands.u_source_area, controller.source_area),
			set(uniform_commands.u_dest_area, controller.dest_area),
			set(uniform_commands.u_flat_color, controller.flat_color),
			set(uniform_commands.u_flat_color_mix, controller.flat_color_mix),
			set(uniform_commands.u_alpha, controller.effect_alpha),
		]) where controller = find(level.chars, value is obj zoom_effect_controller)",
	},
	],
}
