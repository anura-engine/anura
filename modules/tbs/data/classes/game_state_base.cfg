{
	last_message_unique_id: { type: "null|string" },
	nplayer: { type: "int", default: 0 },
	current_player: "int :: nturn%size(players)",

	nturn: { type: "int", default: 0 },

	is_enemy: "def(int a, int b) ->bool a != b",

	players: { type: "[class player]" },
	player_obj: "class player :: players[current_player]",

	handle_message: "def(class message msg) ->commands
		msg.execute(class game_state<- me)
	",

	animations: { type: "[class animation]", default: [] },
	add_animation: "def(map|class animation anim) ->commands
	if(anim is map,
		add(animations, [class animation<- construct('animation.' + (string<- anim.type), anim)]),
		add(animations, [anim])
	)
	",

	concede: "def(int nplayer) ->commands [
		set(winner_index_override, (nplayer+1)%2);
		set(winner, players[winner_index]);
		set(game_over, true)
	]",

	winner_index_override: { type: "int|null" },
	winner_index: "int|null :: winner_index_override",
	winner: { type: "null|class player" },
	game_over: { type: "bool", default: false },

	check_winner: "def() ->commands
	if(n != null, [
		if(n >= 0 and n < size(players), set(winner, players[winner_index])),
		set(game_over, true),
	])
		where n = winner_index
	",

}
