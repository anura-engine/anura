{
	server_only: true,

properties: {
	status_keys: "[string] :: []",

	matchmake: "def([MatchmakingInfo] info) ->[int]|null
	  if(value != null,
		[first_index, second_index]
	    where second_index = index(info[first_index+1:], sorted[index(sorted, value)+1]) + first_index + 1
	    where first_index = index(info, value)
      )
	    where value = find(sorted, index+1 < size(sorted) and sorted[index+1].type = value.type)
		where sorted = sort(info, a.type < b.type)
	",

	create_account: "def(map msg) ->AccountDetails
	{
		chat_channels: {},
	}
	",

	read_account: "def(map info) ->AccountDetails
	{
		display_name: string|null<- info.display_name,
		privileged: bool|null<- info.privileged,
		chat_channels: {string -> bool}<- info.chat_channels,
	}
	",

	user_account: "def(matchmaking_server server, string user_id, AccountDetails account_info, map msg) ->commands
	[
	debug(['USER MESSAGE', msg]),
	]
	",

	admin_account: "def(matchmaking_server server, string user_id, AccountDetails account_info, map msg) ->commands
	debug(['ADMIN MESSAGE', msg])
	",

	process_account: "def(matchmaking_server server, string user_id, AccountDetails account_info) ->commands
	[
	]
	",

	handle_game_over_message: "def(matchmaking_server server, map msg) ->commands [

	]",
	handle_anon_request: "def(matchmaking_server server, map msg) ->map|list|null
		null
	",

	handle_request: "def(matchmaking_server server, map msg, string user_id, AccountDetails account_info) ->commands
		null
	",
}
}
