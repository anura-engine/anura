{
	id: "chat_widget_tab",
	is_strict: true,

	properties: {
		close_handler: { type: "null|function()->commands" },

		_chat_widget: { type: "obj chat_widget" },

		_font_size: { type: "int", init: "lib.gui.py(14)" },

		_hpad: "int ::
			if(diff > 0,
				max(_min_hpad, _max_hpad - diff/2),
				_max_hpad
			)
			where diff = _desired_width - max_width
		",

		_max_hpad: { type: "int", init: "lib.gui.py(16)", },
		_min_hpad: { type: "int", init: "lib.gui.py(8)", },

		_indent: { type: "int", init: "lib.gui.py(12)" },

		text: { type: "string" },

		_cropped_text: "string ::
		if(available >= extents.width, text,
				text[:3] + '...'
		)
		where available = _width - _hpad
		where extents = c.text_extents(lib.font.regular_font, _font_size, text)
		where c = canvas()
		",

		layout_width: "int :: _width - _indent",
		layout_height: "int :: _height",

		max_width: {
			type: "int",
			set: "if(value != _data, [
				set(_data, value),
				_set_dirty(),
			])
			",
		},

		_width: "int :: max(8, min(max_width, _desired_width))",

		_desired_width: "int ::
		int(extents.width) + _max_hpad*2
		where extents = c.text_extents(lib.font.regular_font, _font_size, text)
		where c = canvas()",

		_text_width: "int :: query_cache(global_cache(32), [_font_size, text], int(c.text_extents(lib.font.regular_font, _font_size, text) where c = canvas()))",

		_height: { type: "int", init: "lib.gui.py(20)", },

		_dirty: { type: "bool", default: true },
		_set_dirty: "def()->commands set(_dirty, true)",

		mouseover: { type: "bool", default: false, change: "_set_dirty()" },
		selected: { type: "bool", default: false, change: "_set_dirty()" },
		highlight: { type: "bool", default: false, change: "_set_dirty()" },
		first_tab: { type: "bool", default: false, change: "_set_dirty()" },
		show_right_indent: { type: "bool", default: true, change: "_set_dirty()" },

		render: "def() ->commands
		[
		set(_dirty, false),
		set(animation,
			lib.gui.render_frame(c, _width, _height,
			[
				c.set_operator('SOURCE'),

				if(selected,
					c.set_source_rgba(0.1,0.1,0.1,0.8),
				   mouseover,
					c.set_source_rgba(0,0,0,1.0),
					c.set_source_rgba(0,0,0,0.8)
				),

				c.move_to(if(selected or first_tab, 0, _indent), _height),
				c.line_to(0, 0),
				c.line_to(_width - _indent, 0),
				c.line_to(_width - if(show_right_indent, 0, _indent), _height),
				c.line_to(if(selected or first_tab, 0, _indent), _height),

				c.fill(),

				c.new_path(),

				c.move_to(if(selected or first_tab, 0, _indent), _height),
				c.line_to(0, 0),
				c.line_to(_width - _indent, 0),
				c.line_to(_width - if(show_right_indent, 0, _indent), _height),

				c.set_line_width(1.0),
				c.set_source_rgba(0.22,0.25,0.29,1.0),
				c.stroke(),

				c.translate(_width/2.0 - fragments_width/2.0, _height*0.1),
				map(fragments, [
					c.save(),
					if(highlight,
						c.set_source_rgba(0.6, 0.6, 1.0, 1.0),
					   selected or mouseover,
					    c.set_source_rgba(1,1,1,1),
					    c.set_source_rgba(0.6,0.6,0.6,1)
					),
					value.path,
					c.fill(),
					c.restore(),
				]),
			])

			where fragments_width = sum(map(fragments, value.x_advance))
			where fragments = c.markup_text(q(<font weight='45' size=') + _font_size + q('>) + c.escape_text(_cropped_text) + q(</font>), { width: 10000 })
			where c = canvas()
		)
		]
		",
	},

	on_type_updated: "_set_dirty()",

	on_create: "render()",
	on_process: "if(_dirty, render())",

	on_mouse_enter: "[
		set(mouseover, true)
	]",
	on_mouse_leave: "[
		set(mouseover, false)
	]",

	on_mouse_down: "
	if(arg.mouse_button = 1, _chat_widget.tab_clicked(me); _chat_widget.set_focus())
	",

	on_click: "
	if(arg.mouse_button = 3 and (text[0] in ['@', '#']),
	   spawn('context_menu', {
		x: lib.gui.mouse_pos(level)[0],
		y: lib.gui.mouse_pos(level)[1],
		_font_size: lib.gui.py(14),
		_border: lib.gui.py(4),
		color_scheme: lib.gui.library_color_scheme,
		zorder: me.zorder+1000,
		items: [{
			text: if(text[0] = '@', 'Close', 'Leave Channel'),
			on_select: def()->commands if(me.close_handler, me.close_handler()),
		}]
	   })
	)",
}
