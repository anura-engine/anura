{
	id: "chat_entry",
	is_strict: true,

	properties: {
		timestamp: { type: "int|null" },

		font_size: { type: "int", init: "lib.gui.py(14)" },

		text_color: { type: "[decimal,decimal,decimal,decimal]|[decimal,decimal,decimal]", default: [1,1,1,1] },

		_width: { type: "int" },

		widget_height: { type: "int", default: 0 },

		text: { type: "string" },

		url_entries: { type: "[{ x: decimal, y: decimal, width: decimal, height: decimal, url: string }]", default: [] },
		_selected_url: { type: "null|string" },

		_cursor_hand: { type: "bool", default: false, set: "if(_data != value, [set(_data, value), if(value, lib.gui.add_mouse_cursor('HAND'), [lib.gui.remove_mouse_cursor('HAND'), set(_selected_url, null)])])" },

		render: "def() ->commands

		[

		set(url_entries, []),

		[if(url, add(url_entries, [{x: f.x, y: f.y, width: f.width, height: f.height, url: url[4:]}]))
		 where url = find(f.tag, value[:4] = 'url:') | f <- fragments, f.tag is [string]],
		set(widget_height, calculated_height),
		set(animation,
		lib.gui.render_frame(c, _width, calculated_height,
		[

			map(fragments, [
				if(value.has_image,
				   c.set_source_color([1, 1, 1, 1]),
					c.set_source_color(text_color)
				),

				if(value.tag is [string] and find(value.tag, value[:4] = 'url:') != null,
					c.set_source_color([0,0,1]),
				),
				c.save(),
				value.path,
				c.fill(),
				c.restore(),
			])
		], null, {
			force_no_alpha: true,
		}))
		
		]

		where calculated_height = int(max(map(fragments, value.y + value.height))) + 1

		where fragments = c.markup_text(q(<font weight='45' size=') + font_size + q('>) +
		_sub_markup(c, c.escape_text(text)) + q(</font>), { width: _width })
		where c = canvas()
		",

		_sub_markup: "def(cairo_callable c, string s) ->string
			_sub_markup_internal(c, str, replacements)
			
			where replacements = [
				'(^| )\\*([^ ].*?[^ ]|[^ ])\\*($|[ \\.\\?,])', q(<font weight='+30'>), q(</font>),
				'(^| )_([^ ].*?[^ ]|[^ ])_($|[ \\.\\?,])', '<i>', '</i>',
			]
			where str = _sub_url(c, _sub_emoji(c, s))
		",

		_sub_markup_internal: "def(cairo_callable c, string s, [string] replacements) ->string
			if(size(replacements) < 3, s,

				_sub_markup_internal(c, new_str, replacements[3:])
				where new_str = regex_replace(s, replacements[0], '$1' + replacements[1] + '$2' + replacements[2] + '$3')
			)
		",

		_sub_url: "def(cairo_callable c, string s) ->string
			regex_replace(s, '(http://[a-zA-Z0-9\.\/\?\+=-]+)', q(<font tag='url:$1'>$1</font>))
		",

		_sub_emoji: "def(cairo_callable c, string s) ->string
			_sub_emoji_internal(c, s, replacements)

			where replacements = [
				'<3',    'heart',
				':-)', 'smile',
				':)', 'smile',
				';-)', 'wink',
				';)', 'wink',
				':-p', 'tongue',
				':p', 'tongue',
				'(:', 'smiley-invert',
				'(-:', 'smiley-invert',
				':-D', 'big-smile',
				':D', 'big-smile',
				':-(', 'frown',
				':(', 'frown',
				';-(', 'cry',
				';(', 'cry',
				':>', 'devil',
			]
		",

		_sub_emoji_internal: "def(cairo_callable c, string s, [string] replacements) ->string
			if(size(replacements) < 2, s,
			 _sub_emoji_internal(c,
			   if(n > 0, s[:n-1] + _get_emoji(replacements[1]) + s[n+size(str)-1:], s),
			   if(n = 0, replacements[2:], replacements))
			 where n = strstr(s, str)
			 where str = c.escape_text(replacements[0])
			)
		",

		_get_emoji: "def(string s) ->string
			q(<img src='images/icons/emoji/) + s + q(.svg'/>)
		",

		start_fade: {
			type: "decimal",
			default: 0.0,
			change: "set(shader.uniform_commands.u_start_fade, start_fade) asserting shader",
		},

		end_fade: {
			type: "decimal",
			default: 0.0,
			change: "set(shader.uniform_commands.u_end_fade, end_fade) asserting shader",
		},
	},

	shader: {
		name: "chat_entry_render",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
        }
		",

		fragment: "
        uniform sampler2D u_anura_tex_map;
		varying vec2 v_texcoord;
		uniform float u_start_fade;
		uniform float u_end_fade;
		uniform vec4 u_anura_sprite_area;
		uniform vec4 u_anura_draw_area;

        void main()
        {
			float pos = mix(u_anura_draw_area[1], u_anura_draw_area[3], v_texcoord[1]);
			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			if(gl_FragColor[3] > 0.0) {
				gl_FragColor[0] /= gl_FragColor[3];
				gl_FragColor[1] /= gl_FragColor[3];
				gl_FragColor[2] /= gl_FragColor[3];
			}

			if(pos > u_start_fade && pos < u_end_fade) {
				gl_FragColor[3] *= (pos - u_start_fade)/(u_end_fade - u_start_fade);
			}
		}
		",

		draw: "[
			set(uniform_commands.u_start_fade, parent.start_fade),
			set(uniform_commands.u_end_fade, parent.end_fade),
		]",
	},

	on_being_removed: "set(_cursor_hand, false)",

	on_mouse_leave: "set(_cursor_hand, false)",

	on_mouse_move: "[
		set(_cursor_hand, url != null),
		set(_selected_url, if(url != null, url.url)),

	] where url = find(url_entries, mx > value.x and mx < value.x+value.width and my > value.y and my < value.y+value.height)
  where mx = lib.gui.mouse_pos(level)[0] - x
  where my = lib.gui.mouse_pos(level)[1] - y",

	on_click: "if(_selected_url is string, open_url(_selected_url))",


}
