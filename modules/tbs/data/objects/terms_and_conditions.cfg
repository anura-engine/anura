{
	id: "terms_and_conditions",

	is_strict: true,

	always_active: true,
	hidden_in_game: true,

	properties: {

		close_dialog: "def() ->commands [
			remove_object(me)
		]",

		_text_areas: { default: [], type: "[obj text_area]" },

		//   Turns relative sizes into absolute.
		//   TODO Missing most of the implementation.
		normalize_sizes: 'def
			(string s) -> string
			regex_replace(
				regex_replace(
					s,
					q^ size="\\+50%"^,
					q^ size="150%"^),
				q^ size="\\+20%"^,
				q^ size="120%"^
			)
		',

		//   Adds any missing (missing because of being implicit)
		// '<font size="...' opening tag.
		//   TODO Add missing cases. This is missing most of the
		// implementation.
		add_missing_font_opening_tags: 'def
			(string s) -> string
			regex_replace(
				s,
				q^</font>^,
				q^</font><font size="100%">^
			)
		',

		//   Adds the potentially missing '</font>' (missing because of
		// being implicit) closing tag, at the end of the text, if
		// necessary because not being there.
		//   TODO By refactoring neighbor code, this should eventually
		// disappear.
		fix_end: "def
			(string s) -> string
			if(false
					or s[size(s) - 7] != '<'
					or s[size(s) - 6] != '/'
					or s[size(s) - 5] != 'f'
					or s[size(s) - 4] != 'o'
					or s[size(s) - 3] != 'n'
					or s[size(s) - 2] != 't'
					or s[size(s) - 1] != '>'
					or false,
				s + '</font>',
			// else
				s)
		",

		//   Adds any missing '</font>' closing tag (missing because of
		// being implicit and so not necessary).
		//   TODO Add missing cases. This is missing most of the
		// implementation.
		add_missing_font_closing_tags: "def
			(string s) -> string
			fix_end(s)
		",

		//   Makes explicit those implicit font sizes.
		make_exhaustive: "def
			(string s) -> string
			add_missing_font_closing_tags(
				add_missing_font_opening_tags(
					s))
		",

		//   Prepares a `string` for being passed to `apply_multiplier(string, decimal)`.
		normalize: "def
			(string s) -> string
			make_exhaustive(normalize_sizes(s))
		",

		//   Effectively changes the font size on a normalization.
		//   TODO Missing most of the implementation.
		apply_multiplier: 'def
			(string s, decimal multiplier) -> string
			if(multiplier = 2.5,
				regex_replace(
					regex_replace(
						regex_replace(
							s,
							q^ size="120%"^,
							q^ size="300%"^),
						q^ size="150%"^,
						q^ size="450%"^),
					q^ size="100%"^,
					q^ size="250%"^),
			multiplier = 1.66667,
				regex_replace(
					regex_replace(
						s,
						q^ size="120%"^,
						q^ size="200%"^),
					q^ size="100%"^,
					q^ size="167%"^),
			// else
				s
			)
		',

		//   Abstract function to change the font size.
		change_font_size: 'def
			(string s, decimal multiplier) -> string
//			dump(["inc_font_size", s, returning], returning) where returning =
			apply_multiplier(normalize(s), multiplier)
		',
	},

	events: {
		create: "[
			map(level.chars, if(value != me, [
				set(value.paused, true),
				add(value.y, 10000),
			])),

			spawn('text_area', {
				x: 0,
				y: 0,
				zorder: 100,
				text_width: level.dimensions[2] - lib.gui.py(60),
				_text: resized_terms,
			}, [
				add(_text_areas, [child]),
			])
			where resized_terms =
//				dump(['resized_terms', returning], returning) where returning =
				if(big_display,
					game_terms,
				// else
					change_font_size(game_terms, 1.66667)
				)
			where big_display =
//				dump(['big_display', returning], returning) where returning =
				level.dimensions[2] > 1440
			where game_terms =
//				dump(['game_terms', returning], returning) where returning =
				string <- get_document(
					'data/terms_and_conditions.cfg')
			;

			spawn('scrollable_pane', {
				zorder: 100,
				x: lib.gui.py(20),
				y: lib.gui.py(20),
				focus_on_mouseover: true,
				area_width: level.dimensions[2] - lib.gui.py(60),
				area_height: level.dimensions[3] - lib.gui.py(100),
				elements: map(_text_areas, {
					obj: value,
					ypos: 0,
				}),
			}),

			spawn('button_controller', {
				x2: level.dimensions[2] - lib.gui.py(4),
				y2: level.dimensions[3] - lib.gui.py(4),
				color_scheme: lib.gui.button_color_scheme,
				on_click: bind(me.close_dialog),
				text: 'Close',
			}),

//			set_widgets(display_widgets),
		]",

		being_removed: "
		map(spawned_children, remove_object(value));
		[
			map(level.chars, [
				set(value.paused, false),
				add(value.y, -10000),
			])
		]"
	},
}
