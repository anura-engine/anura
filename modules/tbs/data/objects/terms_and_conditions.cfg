{
	id: "terms_and_conditions",

	is_strict: true,

	always_active: true,
	hidden_in_game: true,

	properties: {

		close_dialog: "def() ->commands [
			remove_object(me)
		]",

		_text_areas: { default: [], type: "[obj text_area]" },

		//   FIXME Missing most of the implementation.
		normalize: 'def
			(string s) -> string
			regex_replace(
				s,
				q^ size="\\+20%"^,
				q^ size="120%"^
			)
		',

		apply_multiplier: 'def
			(string s, decimal multiplier) -> string
			s
		',

		change_font_size: 'def
			(string s, decimal multiplier) -> string
//			dump(["inc_font_size", s, returning], returning) where returning =
			apply_multiplier(normalize(s), multiplier)
		',
	},

	events: {
		create: "[
			map(level.chars, if(value != me, [
				set(value.paused, true),
				add(value.y, 10000),
			])),

			spawn('text_area', {
				x: 0,
				y: 0,
				zorder: 100,
				text_width: level.dimensions[2] - lib.gui.py(60),
				_text: resized_terms,
			}, [
				add(_text_areas, [child]),
			])
			where resized_terms =
//				dump(['resized_terms', returning], returning) where returning =
				if(big_display,
					game_terms,
				// else
					change_font_size(game_terms, 2)
				)
			where big_display =
//				dump(['big_display', returning], returning) where returning =
				level.dimensions[2] > 1440
			where game_terms =
//				dump(['game_terms', returning], returning) where returning =
				string <- get_document(
					'data/terms_and_conditions.cfg')
			;

			spawn('scrollable_pane', {
				zorder: 100,
				x: lib.gui.py(20),
				y: lib.gui.py(20),
				focus_on_mouseover: true,
				area_width: level.dimensions[2] - lib.gui.py(60),
				area_height: level.dimensions[3] - lib.gui.py(100),
				elements: map(_text_areas, {
					obj: value,
					ypos: 0,
				}),
			}),

			spawn('button_controller', {
				x2: level.dimensions[2] - lib.gui.py(4),
				y2: level.dimensions[3] - lib.gui.py(4),
				color_scheme: lib.gui.button_color_scheme,
				on_click: bind(me.close_dialog),
				text: 'Close',
			}),

//			set_widgets(display_widgets),
		]",

		being_removed: "
		map(spawned_children, remove_object(value));
		[
			map(level.chars, [
				set(value.paused, false),
				add(value.y, -10000),
			])
		]"
	},
}
