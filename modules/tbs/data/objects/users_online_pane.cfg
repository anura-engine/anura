{
	id: "users_online_pane",
	is_strict: true,

	properties: {
		_users_online_update: { type: "null|int" },

		title_controller: { type: "obj title_controller_base" },

		_pane: { type: "obj scrollable_pane", dynamic_initialization: true },

		_width: { type: "int" },
		_height: { type: "int" },

		_entries: { type: "{string -> obj user_online_entry}", default: {} },

		update_entries: "def() ->commands
		(
		map(_entries, remove_object(value));
		set(_entries, filter(_entries, key in user_str));
		map(_entries, set(value.info, deep_copy(user_info)) where user_info = find_or_die(users, value.id = context.value.info.id));
		let new_users = filter(user_str, value not in _entries);
		map(new_users,
		  spawn('user_online_entry', {
			title_controller: title_controller,
			zorder: zorder+10,
			_width: _width - lib.gui.py(8),
			_height: lib.gui.py(60),
			info: deep_copy(user_info),
		  }, [
		  	add(_entries, {(value): child}),
			remove_object(child),
		  ])
		
		 where user_info = find_or_die(users, value.id = context.value)
		 );

		set(_pane.elements, map(_entries, {
			obj: value,
			xpos: 0,
			ypos: lib.gui.py(60)*index,
		}));

		_pane.recalculate()
		)

		where user_str = map(users, value.id)
		where users = title_controller.users_online
		",

		render: "def() ->commands
		set(animation, lib.gui.render_frame(c, ww, hh,
		[
			c.set_operator('SOURCE'),
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.1,0.1,0.1,0.5),
			c.fill(),

			c.set_operator('OVER'),
			c.set_line_width(lib.gui.dpy(1.0)),
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.22,0.25,0.29,1),
			c.stroke(),

			c.move_to(0,lib.gui.py(28)),
			c.line_to(ww,lib.gui.py(28)),
			c.stroke(),

			c.set_source_rgba(1,1,1,1),

			map(fragments, [
				c.save(),
				c.translate(lib.gui.py(8), lib.gui.py(7)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='14'>Players Online</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) }),


		]))where ww = _width
		   where hh = _height
		   where c = canvas()
		",
	},

	on_create: "[
		spawn('scrollable_pane', {
			x: x + lib.gui.py(4),
			y: y + lib.gui.py(36),
			area_width: _width - lib.gui.py(8),
			area_height: _height - lib.gui.py(30),
			elements: [],

			zorder: zorder+10,

		}, [
			set(_pane, child),
		]),
		render();
		update_entries()
	]",

	on_process: "
	if(_users_online_update != title_controller.users_online_update, [
		set(_users_online_update, title_controller.users_online_update),
		update_entries(),
	])
	",

	on_type_updated: "fire_event('create')",
}
