{
	id: "chat_widget",
	is_strict: true,

	types: {
		Tab: "{
			tab: obj chat_widget_tab,
			pane: obj scrollable_pane,
		}"
	},
	
	properties: {
		_controller: "obj matchmaking_base :: find_or_die(level.chars, value is obj matchmaking_base)",

		_width: { type: "int" },
		_height: { type: "int" },

		_max_tab_width: "int :: if(size(tabs) <= 1, _width, _width/size(tabs))",

		_first_tab: { type: "int", default: 0 },

		set_focus: "def(bool new_value=true) ->commands
			if(_text_entry != null, set(_text_entry.has_focus, new_value))
		",

		tabs: { type: "[string]", default: [], set: "if(value != _data, [
			set(_data, map(value, lib.chat.channel_display(value))),
			set(lib.chat.tab_ordering, value),
		])" },

		_tabs: { type: "[Tab]", default: [] },
		_visible_tabs: { type: "[Tab]", default: [] },

//		_move_left: { type: "null|obj chat_widget_tab" },
//		_move_right: { type: "null|obj chat_widget_tab" },

		goto_tab: "def(string name) ->commands
		if(tab != null, tab_clicked(tab.tab))
		where tab = find(_tabs, lower(value.tab.text) = lower(name))
		",

		close_tab: "def(Tab tab) ->commands
		if(tab.tab.text[0] = '@',
			leave_channel(tab.tab.text),
			_controller.chat_command(me, tab.tab.text, '/leave ' + tab.tab.text)
		)
		",

		join_channel: "def(string channel_name, [enum {force_focus}] flags=[]) ->commands
		if(find(tabs, value = channel) = null,
		[
			log(['JOIN CHANNEL', channel_name]),
			add(tabs, [channel]),
			add(_tabs, [{tab: object('chat_widget_tab', {x: 0, y: 0, max_width: _max_tab_width, text: channel, _chat_widget: me, selected: false}), pane: _create_pane()}]);

			//add existing history to this channel
			if(channel_info != null,
				map(channel_info.messages, add_chat_message(new_tab.tab.text, value))
			)
		    where channel_info = lib.chat.get_channel(channel_name)
			where new_tab = _tabs[size(_tabs)-1];
			map(_tabs, if(index != 0, set(value.tab.close_handler, (def()->commands me.close_tab(value)))));
			layout_tabs();
			if(channel[0] != '@' or (enum force_focus in flags), tab_clicked(_tabs[size(_tabs)-1].tab))
		]) where channel = lib.chat.channel_display(channel_name)",

		leave_channel: "def(string channel_name) ->commands
		if(n != -1,
			if(_tabs[n].tab.selected,
				tab_clicked(find_or_die(_tabs, index != n).tab)
			);
			remove_object(_tabs[n].tab);
			set(_tabs, _tabs[:n] + _tabs[n+1:]);
			set(tabs, tabs[:n] + tabs[n+1:]);
			render()
		)
		where n = index(tabs, channel)
		where channel = lib.chat.channel_display(channel_name)
		",

		_reply_context: { type: "[string]", default: [] },

		_add_reply_context: "def(string nick) ->commands
			set(_reply_context, [nick] + filter(_reply_context, value != nick))
		",

		add_chat_message: "def(string channel_name, ChatMessage message, string|null context=null) ->commands
		let channel = lib.chat.channel_display(channel_name);
		if(channel != '' and channel[0] = '@' and find(tabs, lower(value) = lower(channel)) = null,
			join_channel(channel_name)
		)
		;
		(
		[
			if(channel != '' and channel[0] = '@', _add_reply_context(channel[1:])),

			add_message({str: if(message.message[:4] = '/me ',
				context_str + ' **' + lib.chat.nick_display(message.nick) + ' ' + message.message[4:],
			    context_str + ' <' + lib.chat.nick_display(message.nick) + '>  ' + message.message),
				timestamp: timestamp,
				channel: channel,
				color: if(timestamp = null, [0.3, 0.3, 0.3],
				          message.disposition = 'whisper', [0.97,0.58,0.12],
				          message.disposition = 'dev', [0,1,0.28],
						  [1,1,1])}),

			if(_tabs[n].tab.selected = false and n != 0 and _in_create = false,
			   set(_tabs[n].tab.highlight, true))
		]
		where context_str = if(context, ' *'+context+'*', '')

		//timestamp of -1 indicates a local placeholder message.
		where timestamp = if(message.timestamp != -1, message.timestamp - lib.tbs.server_time_delta)
		where n = index(map(tabs, lower(value)), lower(channel))
		)
		",

		_in_create: { type: "bool", default: true },

		error_message: "def(string str) ->commands
			add_message({str: str, color: [0.7,0.4,0.4]})
		",

		system_message: "def(string str) ->commands
			add_message({str: str, color: [0.8,0.8,0.8]})
		",

		game_message: "def(string str) ->commands
			add_message({str: str, color: [0.7,1.0,0.7], channel: 'All'})
		",

		_known_messages: { type: "{ [string, int|null, string|null] ->obj chat_entry }", default: {} },

		add_message: "def({str: string, timestamp: int|null, channel: string|null, color: [decimal,decimal,decimal]|null} arg) ->commands

		if(existing_entry != null,
		//update an existing entry.
		if(existing_entry.text_color != text_color,
			set(existing_entry.text_color, text_color);
			existing_entry.render()
		),

		//add a new entry.
		selected_tab != null,
		(
		set(_known_messages[msg_key], entry);
		if(timestamp_entry != null, timestamp_entry.render());
		[
			chat_pane.force_to_bottom(),
			(
			entry.render();
			add(chat_pane.elements, 
			if(timestamp_entry != null, [{
				obj: timestamp_entry,
				xpos: 0,
				ypos: new_ypos
			}], []) + [
			{
				obj: entry,
				xpos: 0,
				ypos: new_ypos + if(timestamp_entry != null, timestamp_entry.widget_height, 0)
			}])
			where new_ypos = sum(map(chat_pane.elements, if(value.obj is obj chat_entry, value.obj.widget_height, value.obj is obj chat_timestamp, value.obj.widget_height, 0)))
			)
		]
			; if(chat_pane in level.chars, chat_pane.recalculate(), remove_object(entry))
		)
		where timestamp_entry = if(estimated_timestamp is int and (last_timestamp = null or (obj chat_entry<-last_timestamp.obj).timestamp < estimated_timestamp - 60*5),
			object('chat_timestamp', {timestamp: estimated_timestamp, _width: _width - lib.gui.py(16), })
		)
		where last_timestamp = find(reverse(chat_pane.elements), value.obj is obj chat_entry and value.obj.timestamp is int)
		where estimated_timestamp = if(arg.timestamp is int, arg.timestamp, time().unix)
		where entry = object('chat_entry', {timestamp: arg.timestamp, _width: _width - lib.gui.py(16), text: arg.str, start_fade: chat_pane.y, end_fade: chat_pane.y + min(3, size(chat_pane.elements))*lib.gui.py(10), text_color: text_color})
		where chat_pane = if(n != null and n != -1, _tabs[n].pane, selected_tab.pane)
		where n = if(arg.channel is string, index(map(tabs, lower(value)), lower(lib.chat.channel_display(arg.channel))))
		)
		where existing_entry = if(arg.timestamp != null, _known_messages[msg_key] or _known_messages[[arg.str, null, if(arg.channel, lower(arg.channel))]])
		where msg_key = [arg.str, arg.timestamp, if(arg.channel, lower(arg.channel))]
		where text_color = arg.color or [1,1,1]
		",

		tab_clicked: "def(obj chat_widget_tab tab) ->commands
		if(_text_entry != null,
			if(tab = _tabs[0].tab,
				set(_text_entry.default_text, 'Select a tab to chat. Press / for commands.'),
				set(_text_entry.default_text, 'Type here to chat. Press / for commands.')
			)
		);
		if(tab.selected = false,

			[
			set(tab.highlight, false),
			if(tab.text = 'All', map(_tabs, set(value.tab.highlight, false))),

			map(_tabs, [
				set(value.tab.zorder, me.zorder + if(tab = value.tab, 5, 2)),

				set(value.tab.selected, tab = value.tab),
				if(tab = value.tab,
					(add_object(value.pane); value.pane.recalculate()),
					remove_object(value.pane)
				)
			]),
			]; render()
		)
		",

		layout_tabs: "def() ->commands
		map(_tabs, set(value.tab.max_width, _max_tab_width));
		[map(_tabs, remove_object(value.tab)), /*remove_object(_move_left), remove_object(_move_right)*/];

		set(_visible_tabs, []);

		map(tabs_slice, [
			set(value.tab.first_tab, index = 0),
			set(value.tab.y, me.y - value.tab.layout_height),
			set(value.tab.x, me.x + sum(map(tabs_slice[:index], value.tab.layout_width)));

			if(true, //value.tab.x+value.tab.layout_width < x + _width*0.8,
			[
				add_object(value.tab),
				add(_visible_tabs, [value]),
			]
			)
		]) where tabs_slice = _tabs[_first_tab:]

		;

		map(_visible_tabs,
			set(value.tab.show_right_indent, index = size(_visible_tabs)-1 or _visible_tabs[index+1].tab.selected = false)
		);

		if(size(_visible_tabs) < size(_tabs),
		[
		/*
			set(_move_left.y, me.y - _move_left.layout_height),
			set(_move_right.y, me.y - _move_right.layout_height),
			set(_move_left.x, x + _width - int(_move_left.layout_width*2.5)),
			set(_move_right.x, x + _width - int(_move_left.layout_width*1.5)),
			add_object(_move_left),
			add_object(_move_right),
			*/
		]

		//asserting _move_left and _move_right

		)
		",

		render: "def() ->commands
		[
			layout_tabs();
			set(animation,
			    lib.gui.render_frame(c, _width, _height,
				[
					c.set_operator('SOURCE'),
					c.rectangle(0, 0, _width, _height),
					c.set_source_rgba(0.1, 0.1, 0.1, 0.5),
					c.fill(),

					c.set_operator('OVER'),

					lib.gui.main_menu_gui_border(c),
					c.move_to(0, 0),

					if(selected_tab != null and (selected_tab in _visible_tabs), [
						c.line_to(selected_tab.tab.x - x, 0),
						c.move_to(selected_tab.tab.x - x + selected_tab.tab.img_w, 0),
					]),

					c.line_to(_width, 0),
					c.line_to(_width, _height),
					c.line_to(0, _height),
					c.line_to(0, 0),
					c.stroke(),
				]
				)
			) where c = canvas()

		]",



		selected_tab: "null|Tab :: find(_tabs, value.tab.selected)",

		_context_menu: {
			type: "null|obj context_menu",
			set: "if(value != _data, [
				remove_object(_data),
				set(_data, value),
			])",
		},

		set_text: "def(string new_text) ->commands
		[
			set(_text_entry.text, new_text),
			set(_text_entry.cursor_pos, size(new_text)),
		]
		",

		_known_users: "def() ->[string]
			if(selected_tab != null and selected_tab.tab.text[0] = '#',
			  if(ch, keys(ch.users), [])
			   where ch = lib.chat.get_channel(selected_tab.tab.text),

			unique(
			  sort(
			  fold(
			   map(filter(tabs, value[0] = '#'),
			   if(ch, keys(ch.users), [])
			   where ch = lib.chat.get_channel(value)),
			   a + b, [])
			  )
			  )
			)
		",

		_user_capitalization: "def(string username) ->string
		if(messages, messages[0].nick, username)

			where messages = sort([ChatMessage] ::
			fold(
				map(filter(tabs, value[0] = '#'),
				if(ch != null, filter(ch.messages, lower(value.nick) = lower(username)), [])
					where ch = lib.chat.get_channel(value)
				),
			a+b),
			
			a.timestamp > b.timestamp
			)
		",

		_possible_nick_expansions: "def(string nick) ->[string]
			map(filter(_known_users(), lower(nick) = value[:size(nick)]), lib.chat.nick_display(value))
		",

		_current_nick_expansions: { type: "null|[string]" },
		_current_nick_expansion_base: { type: "string", default: '' },

		tab_chat: "def() ->commands
			if(_current_nick_expansions,
				[
					set_text(_current_nick_expansion_base + _user_capitalization(_current_nick_expansions[0]) + ' '),
					set(_current_nick_expansions, _current_nick_expansions[1:] + _current_nick_expansions[:1]),
				],

			   regex_match(text, '^/[a-zA-Z]*$') != null,
				_command_expansion(text),
			   reply_breakout != null and _reply_context,
			   set_text('/reply ' + new_nick + ' ' + (string<-reply_breakout[1]))
			    where new_nick = _reply_context[(n+1)%size(_reply_context)]
				where n = index(_reply_context, reply_breakout[0]),

				nick_expansion is [string],

				if(possible, [
					set_text(nick_expansion[0] + _user_capitalization(possible[0]) + ' '),
					if(size(possible) > 1, [
						set(_current_nick_expansions, possible[1:] + possible[:1]),
						set(_current_nick_expansion_base, nick_expansion[0]),
					]),
				])

				where possible = _possible_nick_expansions(nick_expansion[1])
			)
			
			where nick_expansion = regex_match(text, '^(.*?)([a-zA-Z0-9_^-]+)$')
			where reply_breakout = regex_match(text, '^/reply +([a-zA-Z0-9_^-]+) (.*)')
			where text = _text_entry.text
		",

		_command_expansion: "def(string text) ->commands
		 if(command_expansion,
		 [
		 	set_text('/' + command_expansion + ' ' + if(command_expansion = 'reply' and _reply_context, _reply_context[0] + ' ', ''))
		 ])

		  where command_expansion = find(keys(_controller.possible_chat_commands), value[:size(cmd)] = cmd)
		  where cmd = text[1:size(text)]
		",

		_prev_text: { type: "string", default: "" },

		change_chat: "def() ->commands
		[
		set(_current_nick_expansions, null),

		set(_context_menu, null),
		if(regex_match(text, '^\/[a-zA-Z]*$') != null,
		[
		if(possible_commands,
			spawn('context_menu', {
				_font_size: lib.gui.py(14),
				_border: lib.gui.py(4),
				color_scheme: lib.gui.library_color_scheme,
				zorder: me.zorder+1000,
				x: _text_entry.x,
				y2: _text_entry.y - lib.gui.py(16),
				items: map(possible_commands, {
					text: key,
					on_select: bind(me.set_text, '/' + key + ' ' + if(key = 'reply' and _reply_context, _reply_context[0] + ' ', '')),
				})
			}, [
				set(_context_menu, child)
			])
		)
		]
		    where possible_commands = filter(_controller.possible_chat_commands, key[:size(cmd_start)] = cmd_start)
			where cmd_start = text[1:],
		  regex_match(text, '^\/[a-zA-Z]+ $') != null and _prev_text = text[:size(text)-1],
		  _command_expansion(text[:size(text)-1]),

		),

		set(_prev_text, text)
		]
			where cursor = _text_entry.cursor_pos
			where text = _text_entry.text
		",

		enter_chat: "def() ->commands
		if(selected_tab = null or selected_tab.tab.text = 'All' and (_text_entry.text = '' or _text_entry.text[0] != '/'),
			add_message({str: 'Click a tab to choose a channel to chat in', color: [1.0,0.6,0.6]}),
		[
			if(selected_tab != null, _controller.chat_command(me, selected_tab.tab.text, _text_entry.text)),

			set(_text_entry.text, ''),
		]
		)
		",

		_text_entry: { type: "obj text_entry", dynamic_initialization: true },

		_create_pane: "def() ->obj scrollable_pane
		object('scrollable_pane', {
			area_width: _width - lib.gui.py(16),
			area_height: _height - lib.gui.py(44),
			x: x + lib.gui.py(16)/2,
			y: y + lib.gui.py(8),
			elements: [],
			focus_on_mouseover: true,
			hide_scrollbar_on_mouse_off: true,
			_scrollbar_shown: false,
			clamp_to_bottom: true,
			zorder: me.zorder+100,
		})",

		reset: "def() ->commands
			execute(me, fire_event('create'));

			map(_tabs, if(value.tab.text[0] = '#', set(value.tab.highlight, false)))
		",

		_widget_tabs: { type: "null|[string]" },

		_create_widgets: "def() ->commands

		if(tabs != _widget_tabs,
		[
			set(_widget_tabs, tabs),

			set(lib.chat.offline_message_channels, []),

			if(_text_entry = null,
			spawn('text_entry', {
				_width: _width - lib.gui.py(16),
				x: x + lib.gui.py(16)/2,
				y: y + _height - lib.gui.py(30),
				zorder: me.zorder+5,
				default_text: 'Type here to chat. Press / for commands.',
				_on_enter: me.enter_chat,
				_on_change: me.change_chat,
				_on_tab: me.tab_chat,
			}, [
				set(_text_entry, child)
			])
			),

//		set(_move_left, object('chat_widget_tab', {x: 0, y: 0, text: '<', _chat_widget: me, selected: false, _indent: 0, _hpad: lib.gui.py(6)})),
//		set(_move_right, object('chat_widget_tab', {x: 0, y: 0, text: '>', _chat_widget: me, selected: false, _indent: 0, _hpad: lib.gui.py(6)})),
	
			set(_tabs, map(tabs, existing or {
				tab: object('chat_widget_tab', {x: 0, y: 0, max_width: _max_tab_width,  text: value, _chat_widget: me, selected: false}),
				pane: _create_pane(),
			}
			
			where existing = find(_tabs, value.tab.text = context.value)));

			map(_tabs, if(index != 0, set(value.tab.close_handler, (def()->commands me.close_tab(value)))))
		]
		)
		",
	},

	events: {
		create: "
	lib.chat.reinit_chat();	
	set(tabs, ['All'] + sorted_channels)
	where sorted_channels = sort(channels, idx(index(ordering, a)) < idx(index(ordering, b))) where idx = def(int i)->int if(i < 0, 1000000, i)
    where ordering = lib.chat.tab_ordering
    where channels = map(channel_names, lib.chat.channel_display(value))
	where channel_names =
	  keys(_controller.account_info.chat_channels or {}) + filter(lib.chat.offline_message_channels, value[0] != '#');
	
	_create_widgets();

	set(_in_create, true);
	let all_messages = [{channel: string, message: ChatMessage}] <- [];
	tab_clicked(_tabs[0].tab);
		[[
		  if(info.topic != null,
			add_message({str: 'Topic for *' + t.tab.text + '* is ' + info.topic, channel: t.tab.text, color: [0.6,1.0,0.6]})
		  ),
		  map(info.messages, add_chat_message(t.tab.text, value)),
		  add(all_messages, map(info.messages, {channel: t.tab.text, message: value}))
		 ]
		  where info = ChatChannel<-lib.chat.get_channel(t.tab.text)
		 | t <- _tabs, t.tab.text[0] = '#' or t.tab.text[0] = '@', lib.chat.get_channel(t.tab.text)];
	map(sort(all_messages, a.message.timestamp < b.message.timestamp), add_chat_message('All', value.message, value.channel));

	set(_in_create, false)
	",

		being_removed: "[
		map(_tabs, [
			remove_object(value.tab),
			remove_object(value.pane),
		]),
		map(spawned_children, remove_object(value)),
		]",
	},

}
