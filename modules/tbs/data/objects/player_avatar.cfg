{
id: "player_avatar",
is_strict: true,
always_active: true,

mouse_drag_threshold: 10,

properties: {
	mouseover: { type: "bool", default: false },

	is_enemy: { type: "bool", default: false },

	_avatar: { type: "string" },
	get_avatar: "def()->string _avatar",
	edit_flip: "def() ->commands
		set(_avatar_info_edit, info + {flip: not info.flip})
	",

	avatar_info: "{string -> AvatarInfo} ::
	  query_cache(global_cache(4), if(_editing, 1d10000), {string -> AvatarInfo} <- get_document('data/avatars.cfg', if(_editing, ['uncached'], [])))",
	
	_editing: { type: "bool", default: false },
	_anchor_mouse: { type: "null|[int,int]" },
	_avatar_info_edit: { type: "null|AvatarInfo", change: "render(_width, _height); render_preview()" },
	
	info: "AvatarInfo ::
	if(_avatar_info_edit != null, _avatar_info_edit,
	   res != null, res,
	{
		name: _avatar,
		path: 'images/portraits/' + _avatar,
		flip: false,
		focus: [300,300],
		radius: 200,
	}
	)
	  where res = avatar_info[_avatar]",

	reverse: "bool :: if(info.flip, true, false)",

	_top: { type: "null|int" },
	_edge: { type: "null|int" },
	_available_space: { type: "null|int" },
	_width: { type: "int" },
	_height: { type: "int" },

	scale_dim: "def(int ww, int hh, int duration) ->commands
	execute(me,
		animate(me, {
			_width: ww,
			_height: hh,
		}, {
			duration: duration,
			on_process: ; render(_width, _height); render_preview(),
		})
	)
	",

	_dirty: { type: "bool", default: true },

	preview_y: { type: "int", default: 0 },
	preview_x: { type: "int", default: 0 },

	preview_width: { type: "int", default: 800 },
	preview_height: { type: "int", default: 996 },

	preview_ratio: { default: 1.0, set: "if(value != _data, [set(_dirty, true), set(_data, value)])" },

	face_right: { type: "bool", default: true },

	render_preview: "def() ->commands [
//		render(int(mix(preview_width, _width, preview_ratio)),
//		       int(mix(preview_height, _height, preview_ratio))),
		set(uv_array, new_uv_array),
		set(xy_array, if(face_right,
		                 [0,0, wratio,0, 0,hratio, wratio,hratio,],
		                 [1,0, -(wratio-1.0),0, 1,hratio, -(wratio-1.0),hratio,]
						)),
		set(shader.uniform_commands.u_sprite_area, [new_uv_array[0], new_uv_array[1], new_uv_array[2], new_uv_array[5]]) asserting shader,
		set(_dirty, false),
		set(shader.uniform_commands.u_radius, 1.5 - preview_ratio) asserting shader,
		if(_top != null, set(y, int(mix(preview_y, _top, preview_ratio)))),
		if(_edge != null, if(face_right, set(x, edge), set(x2, edge)) where edge = int(mix(preview_x, _edge, preview_ratio))),
	]
	 where new_uv_array = if(not reverse, uv_array_unflipped,
	                         [uv_array_unflipped[2],uv_array_unflipped[1],
							  uv_array_unflipped[0],uv_array_unflipped[3],
							  uv_array_unflipped[2],uv_array_unflipped[5],
							  uv_array_unflipped[0],uv_array_unflipped[7],
							 ])
	 where uv_array_unflipped = map(preview_uv, mix(value, uv_focus[index], preview_ratio))
	 where uv_focus = [uv_focus_mid[0]-uv_focus_w,uv_focus_mid[1]-uv_focus_h,
	                   uv_focus_mid[0]+uv_focus_w,uv_focus_mid[1]-uv_focus_h,
	                   uv_focus_mid[0]-uv_focus_w,uv_focus_mid[1]+uv_focus_h,
	                   uv_focus_mid[0]+uv_focus_w,uv_focus_mid[1]+uv_focus_h,
					   ]
	  where preview_uv = [
	  	preview_u, preview_v,
		1.0 - preview_u, preview_v,
		preview_u, 1.0 - preview_v,
		1.0 - preview_u, 1.0 - preview_v,
	  ]
	  where preview_v = 0.0
	  where preview_u = (1.0 - (preview_width/decimal(portrait_texture_width)) * (portrait_texture_height / decimal(preview_height)))*0.5
	  where preview_uv_ratio = preview_dst_ratio/preview_src_ratio
	  where preview_dst_ratio = preview_width / decimal(preview_height)
	  where preview_src_ratio = portrait_texture_width / decimal(portrait_texture_height)
	  where uv_focus_w = (radius/portrait_texture_width)
	  where uv_focus_h = (radius/portrait_texture_height)
	  where uv_focus_mid = [focus[0]/portrait_texture_width,focus[1]/portrait_texture_height]
	  where radius = decimal<- info.radius or 360.0
	  where focus = [decimal,decimal]<- (info.focus or [400,498])
	  where wratio = decimal(virtual_width)/_width
	  where hratio = decimal(virtual_height)/_height
	  where virtual_width = mix(preview_width, _width, preview_ratio)
	  where virtual_height = mix(preview_height, _height, preview_ratio)
	  where portrait_texture_width = if(portrait_texture != null, decimal(portrait_texture.width), 800.0)
	  where portrait_texture_height = if(portrait_texture != null, decimal(portrait_texture.height), 996.0)
	  ",


	highlight: { default: true },

	selectable: { default: false },

	player_num: { default: 0 },

	current_desaturation: { default: 0.0 },
	target_desaturation: { default: 0.0 },

	player_name: "string :: _nick",
	_nick: { type: "string" },

	_calculate_nick_font_size: "def() ->int
		find([64, 52, 40, 32, 24], c.text_extents(lib.font.regular_font, value, _nick).width <= _width*0.4) or 16 where c = canvas()",

	_render_key: "[preview_ratio, _width, _height, _avatar]",

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: query_cache(global_cache(2), _render_key, c.render(ww, hh, [

			c.arc(hh/2, hh/2, mix(hh*1.5, hh/2 - 2, preview_ratio), 0.0, 2*3.15),
			c.clip(),
			c.new_path(),

//			c.scale(if(reverse, -image_scaling, image_scaling), image_scaling),
//			if(reverse, c.translate(-ww/image_scaling, 0)),


			c.rectangle(0, 0, ww, hh),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
//			c.set_operator('SOURCE'),
//			c.paint_image(info.path, [-image_area[0], -image_area[1]]),
		])
		   where nick_text_area = c.text_extents(lib.font.regular_font, _calculate_nick_font_size(), _nick)
		   where image_scaling = decimal(ww)/decimal(image_area[2] - image_area[0])
		   where image_area = [decimal,decimal,decimal,decimal] <-
		     map(image_area_dest, mix(image_area_orig[index], image_area_dest[index], preview_ratio))
		   where image_area_orig = [0,0,image_size[0],image_size[1]]
		   where image_area_dest = [decimal,decimal,decimal,decimal] ::
		   if(src_aspect = dst_aspect, base_image_area,
		      src_aspect > dst_aspect,
			  [base_image_area[0] + (base_image_area[2] - base_image_area[0])/2 - mod_width/2, base_image_area[1], base_image_area[0] + (base_image_area[2] - base_image_area[0])/2 + mod_width/2, base_image_area[3]] where mod_width = (base_image_area[3] - base_image_area[1])*dst_aspect,

			  [base_image_area[0], base_image_area[1] + (base_image_area[3] - base_image_area[1])/2 - mod_height/2, base_image_area[2], base_image_area[1] + (base_image_area[3] - base_image_area[1])/2 + mod_height/2] where mod_height = (base_image_area[2] - base_image_area[0])/dst_aspect
		   )
		   where src_aspect = decimal(base_image_area[2] - base_image_area[0]) / decimal(base_image_area[3] - base_image_area[1])
		   where dst_aspect = decimal(ww)/decimal(hh)
		   where base_image_area =  unflipped_image_area
		   
		//   if(not reverse, unflipped_image_area,
		 //     [image_size[0] - unflipped_image_area[2], unflipped_image_area[1], image_size[0] - unflipped_image_area[0], unflipped_image_area[3]])
		   where unflipped_image_area = if(info.rect, info.rect, [0,0,image_size[0],image_size[1]])
		   where image_size = c.image_dim('images/' + info.path)) where c = canvas()

		   where hex_indent_inverse = 0.75
		   where hex_indent = 0.25
	})]",

	render_nick: "def() ->commands
		set(nick_texture, c.render(lib.gui.py(140), lib.gui.py(34), [
			c.move_to(0, 0),
			c.line_to(lib.gui.py(130), 0),
			c.line_to(lib.gui.py(140), lib.gui.py(34/2)),
			c.line_to(lib.gui.py(130), lib.gui.py(34)),
			c.line_to(0, lib.gui.py(34)),
			c.set_source_rgba(0, 0, 0, 0.8),
			c.fill(),

			c.translate(lib.gui.py(34), lib.gui.py(4)),

			c.set_source_color('white'),
			map(fragments, [
				c.save(),
				value.path,
				c.fill(),
				c.restore(),
			]),
		])
		where fragments = c.markup_text(sprintf(q(<font size='%d'>%s</font>), lib.gui.py(18), lib.chat.nick_display(player_name)), { width: 10000 })
		where c = canvas()
		)
	",

	nick_width: "decimal :: 140.0/186.0",
	nick_height: "decimal :: 34.0/186.0",
	nick_alpha: { default: 0.0 },

	flash_hit: "def() ->commands [
		set(shader.uniform_commands.is_flashing, true) asserting shader,
		schedule(3, set(shader.uniform_commands.is_flashing, false)) asserting shader,
	]",

	click_handler: { type: "null|function(obj player_avatar)->commands" },
	mouse_enter_handler: { type: "null|function(obj player_avatar)->commands" },
	mouse_leave_handler: { type: "null|function(obj player_avatar)->commands" },

	frame_texture: { type: "null|texture_object" },
	portrait_texture: { type: "null|texture_object" },
	nick_texture: { type: "null|texture_object" },

	new_turn_flash: "def() ->commands
	set(flash_anim, -1.0);
	animate(me, {
		flash_anim: 1.0,
	}, {
		duration: 40,
		on_complete: set(me.flash_anim, -1.0),
	})
	",

	flash_anim: { type: "decimal", default: -2.0 },
},

on_type_updated: "fire_event('create')",

on_create: "[
	render_nick(),
	set(portrait_texture, query_cache(lib.gui.image_cache, info.path[7:], get_texture({ image: info.path[7:], surface_flags: ['NO_ALPHA_FILTER', 'NO_CACHE']}))),
	render(_width, _height); render_preview(),
	if(_top != null, set(y, _top)),
	if(_edge != null, if(face_right, set(x, _edge), set(x2, _edge))),
	set(frame_texture, query_cache(global_cache(2), [_width,_height,is_enemy], lib.gui.get_scaled_image_uncached(canvas(), sprintf('images/avatar/avatar-frame-%s.png', if(is_enemy, 'silver', 'gold')), _width, _height))),
]",

shader: {
	name: "player_avatar_render",
	vertex: "
	uniform mat4 u_anura_mvp_matrix;
	uniform vec4 u_anura_sprite_area;
	uniform vec4 u_anura_draw_area;
	uniform vec4 u_sprite_area;
	uniform vec2 u_target;
	uniform float u_alt_zoom;
	uniform vec2 u_alt_target;
	uniform float u_ratio;
	attribute vec4 a_anura_vertex;
	attribute vec2 a_anura_texcoord;
	varying vec2 v_texcoord;
	varying vec2 v_alt_texcoord;
	varying vec2 v_framecoord;
	void main()
	{
		gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		v_texcoord = a_anura_texcoord;
		v_framecoord = vec2(
		                  (a_anura_texcoord[0] - u_sprite_area[0])/(u_sprite_area[2] - u_sprite_area[0]),
		                  (a_anura_texcoord[1] - u_sprite_area[1])/(u_sprite_area[3] - u_sprite_area[1]));
	}
	",

	fragment: "

	vec3 rgb_to_hsv(vec3 c)
	{
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	vec3 hsv_to_rgb(vec3 c)
	{
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

	uniform sampler2D u_anura_tex_map;
	uniform sampler2D u_property_frame_texture;
	uniform sampler2D u_property_portrait_texture;
	uniform sampler2D u_property_nick_texture;
	uniform float u_ratio;
	uniform vec4 u_anura_sprite_area;
	uniform vec4 u_anura_draw_area;
	uniform float u_property_img_w;
	uniform float u_property_img_h;
	uniform float u_property_current_desaturation;
	uniform float u_alpha;
	uniform float u_frame_alpha;
	uniform float u_radius;
	uniform float u_property_nick_width;
	uniform float u_property_nick_height;
	uniform float u_property_nick_alpha;
	uniform float u_property_flash_anim;
	uniform bool is_flashing;
	uniform bool u_property_face_right;
	varying vec2 v_texcoord;
	varying vec2 v_framecoord;
	void main()
	{
		vec4 col = vec4(0,0,0,0);
		for(float x = -1.0; x <= 1.0; x += 1.0) {
			for(float y = -1.0; y <= 1.0; y += 1.0) {
				vec2 coord = vec2(v_texcoord[0] + x/800.0, v_texcoord[1] + y/996.0);
				col += texture2D(u_property_portrait_texture, coord);
			}
		}

		gl_FragColor = col/9.0;

		gl_FragColor[3] *= u_alpha;

		if(u_property_current_desaturation != 0.0) {
			vec3 hsv = rgb_to_hsv(gl_FragColor.rgb);
			hsv[1] *= 1.0 - u_property_current_desaturation;
			gl_FragColor.rgb = hsv_to_rgb(hsv);
		}

		float flash_ratio = ((v_texcoord[1] - v_texcoord[0]) - (u_property_flash_anim - 0.1)) / 0.2;

		if(flash_ratio > 0.0 && flash_ratio < 1.0) {
			gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(1.0,1.0,1.0), sin(flash_ratio*3.14));
		}

		if(is_flashing) {
			gl_FragColor.rgb = vec3(1.0,1.0,1.0);
		}

		float dist_center_x = v_framecoord[0] - 0.5;
		float dist_center_y = v_framecoord[1] - 0.5;
		float dist_center = sqrt(dist_center_x*dist_center_x + dist_center_y*dist_center_y);
		if(dist_center > u_radius*0.95) {
			gl_FragColor[3] = 0.0;
		}

		vec2 nick_coord = v_framecoord;
		if(!u_property_face_right) {
			nick_coord[0] = 1.0 - nick_coord[0] - 0.03;
		}

		float nick_ypos = 0.65;
		if(nick_coord[0] < u_property_nick_width && nick_coord[1] > nick_ypos && nick_coord[1] < nick_ypos + u_property_nick_height && u_property_nick_alpha > 0.0) {
			float alpha = gl_FragColor[3];
			vec4 col = texture2D(u_property_nick_texture, (nick_coord - vec2(0.0, nick_ypos)) * vec2(1.0/u_property_nick_width, 1.0/u_property_nick_height));
			gl_FragColor = mix(gl_FragColor, col, col[3]*u_property_nick_alpha);
			gl_FragColor[3] = alpha;
		}

		//vec2((v_texcoord[0] - u_anura_sprite_area[0])/(u_anura_sprite_area[2] - u_anura_sprite_area[0]),
		//                        (v_texcoord[1] - u_anura_sprite_area[1])/(u_anura_sprite_area[3] - u_anura_sprite_area[1]));

		vec4 frame_col = vec4(0.0,0.0,0.0,0.0);
		for(float x = -1.0; x <= 1.0; x += 1.0) {
			for(float y = -1.0; y <= 1.0; y += 1.0) {
				frame_col += texture2D(u_property_frame_texture, v_framecoord + vec2(x/u_property_img_w,y/u_property_img_h));
			}
		}

		frame_col /= 9.0;

		float alpha = max(frame_col[3]*u_frame_alpha, gl_FragColor[3]);
		gl_FragColor = mix(gl_FragColor, frame_col, frame_col[3]*u_frame_alpha);
		gl_FragColor[3] = alpha;
	}
	",

	create: "[
		set(uniform_commands.is_flashing, false),
		set(uniform_commands.u_radius, 0.5),
	]",

	draw: "[
		set(textures, [parent.frame_texture, parent.portrait_texture]),
		set(parent.frame_texture.binding_point, 2),
		set(parent.portrait_texture.binding_point, 3),

		set(uniform_commands.u_alpha, parent.alpha/255.0),
		set(uniform_commands.u_frame_alpha, if(parent.preview_ratio > 0.8, (parent.preview_ratio - 0.8)*5.0, 0.0)),
	]
	",
},

on_process: "[
if(target_desaturation > current_desaturation,
	set(current_desaturation, min(target_desaturation, current_desaturation+0.05)),
	target_desaturation < current_desaturation,
	set(current_desaturation, max(target_desaturation, current_desaturation-0.05))
),
if(_dirty, render_preview())
]
",

on_mouse_enter: "[
	set(mouseover, true),
	if(mouse_enter_handler, mouse_enter_handler(me)),
]",
on_mouse_leave: "[
	set(mouseover, false),
	if(mouse_leave_handler, mouse_leave_handler(me)),
]",

on_click: "[
	if(click_handler != null, click_handler(me)),
]",

on_drag_start: "if(_editing, [
])",

on_drag_end: "if(_editing, [
	set(_anchor_mouse, null),
])",

on_drag: "if(_editing, [
	if(_anchor_mouse != null,
	if('left' in level.player.ctrl_mice[0],
		set(_avatar_info_edit, info + { focus: [info.focus[0] + dx, info.focus[1] + dy] }),
		set(_avatar_info_edit, info + { radius: info.radius + dx })
	)
		where dx = _anchor_mouse[0] - lib.gui.mouse_pos(level)[0]
		where dy = _anchor_mouse[1] - lib.gui.mouse_pos(level)[1]
	),
	set(_anchor_mouse, lib.gui.mouse_pos(level)),
	log(['dragging: ', _avatar_info_edit]),
])",

}
