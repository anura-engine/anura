{
	id: "user_online_entry",
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller_base" },
		_width: { type: "int" },
		_height: { type: "int" },

		info: { type: "OnlineUser", set: "if(value != _data, [set(_data, value); render(); create_objects()])" },

		_avatar: { type: "null|obj player_avatar" },
		_options: { type: "null|obj combo_label_controller" },

		_children: { type: "[custom_obj]", default: [] },

		create_objects: "def() ->commands [
			map(_children, remove_object(value)),
			set(_children, []),

			if(info.avatar != null,
				spawn('player_avatar', {
					x: x + lib.gui.py(12),
					mid_y: mid_y,
					player_num: 0,
					_avatar: info.avatar,
					zorder: zorder+10,
					_width: lib.gui.py(44),
					_height: lib.gui.py(44),
					_nick: '',
					facing: 1,
					highlight: true,
					current_desaturation: 0.0,
					target_desaturation: 0.0,
				}, [
					add(_children, [child]),
					set(_avatar, child),
				])
			),

			if(lower(info.id) != lower(title_controller.username),
				spawn('combo_label_controller', {
					xpos: x,
					ypos: y2 + lib.gui.py(3),
					halign: 'left',
					selected_index: -1,
					zorder: zorder+10,
					_font_size: lib.gui.py(14),
					items: if(has_challenged, ['Accept', 'Decline'], ['Challenge'] + if(info.status != 'idle', ['Watch'], []) + ['Chat']),
					click_handler: me._select_option,
					grouping: info.id + '_user_info',
				}, [
					add(_children, [child]),
					set(_options, child),
				])
			),
		]
		",

		_watch_game: "def() ->commands
		if(server != null,
		   title_controller.observe_game(server, info.id),
		   title_controller.request_observe_game(info.id)
		)
		where server = find(title_controller.game_servers, info.id in value.users)
		",

		_start_chat: "def() ->commands
		if(chat != null,
			chat.join_channel('@' + info.id);
			chat.goto_tab('@' + info.id);
			chat.set_focus()
		)
		where chat = find(level.chars, value is obj chat_widget)
		",

		_decline_challenge: "def() ->commands
			set(lib.tbs.open_challenges, filter(lib.tbs.open_challenges, value.user != info.id));
			refresh()
		",

		_select_option: "def(int n) ->commands
		switch(option,
		'Accept', title_controller.issue_challenge(info.id),
		'Challenge', title_controller.issue_challenge(info.id),
		'Decline', _decline_challenge(),
		'Watch', _watch_game(),
		'Chat', _start_chat(),
		null
		)
		where option = _options.items[n]
		asserting _options != null
		",

		render: "def() ->commands
		set(animation, lib.gui.render_frame(c, ww, hh,
		[
			c.rectangle(0, 0, ww, hh),
			//c.set_source_rgba(1,0.10,0.11,1),
			c.set_source_rgba(0.09,0.10,0.11,1),
			c.fill(),

			c.set_source_rgba(1,1,1,1),

			map(fragments, [
				c.save(),
				c.translate(ww*0.26, int(hh*0.08)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='18'>) + lib.chat.nick_display(info.id) + q(</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) }),

			map(fragments, [
				c.save(),
				c.translate(ww*0.268, int(hh*0.39)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='16'>) + if(has_challenged, 'has challenged you!', info.status) + q(</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) }),


		]))where ww = _width
		   where hh = _height
		   where c = canvas()
		",

		refresh: "def() ->commands
		render(); create_objects(); position_children()
		",

		has_challenged: "bool :: find(lib.tbs.open_challenges, value.user = info.id) != null",

		position_children: "def() ->commands
		[
		if(_avatar != null, [
			set(_avatar.x, x + lib.gui.py(4)),
			set(_avatar.mid_y, mid_y),
		]),

		if(_options != null, [
			_options.move(x + int(_width*0.26), y2 - lib.gui.py(3)),
		]),
		]
		",
	},

	on_create: "refresh()",
	on_process: "[
		position_children(),
	]",
	on_being_added: "map(_children, add_object(value))",
	on_being_removed: "map(_children, remove_object(value))",

	on_type_updated: "fire_event('create')",
}
