{
	id: "chat_timestamp",
	is_strict: true,

	properties: {
		timestamp: { type: "int" },

		_font_size: "int :: lib.gui.py(12)",

		_width: { type: "int" },
		widget_height: { type: "int", default: 0 },

		_hpad: { type: "int", init: "lib.gui.py(6)" },

		text: "string ::
		if(t.yday = now.yday, '',
		   abs(t.yday - now.yday) < 7, t.weekday + ' ',
		   sprintf('%d/%d ', t.month, t.day)
		) +
		sprintf('%02d:%02d', t.hour, t.minute)
		  where t = time(timestamp)
		  where now = time()",

		render: "def() ->commands

		[
		set(widget_height, calculated_height),

		set(animation,
		lib.gui.render_frame(c, round_to_even(_width), round_to_even(calculated_height),
		[
			c.set_source_color([0.4,0.4,0.6,1]),
			c.set_line_width(lib.gui.dpy(1.0)),

			c.move_to(_hpad, calculated_height/2),
			c.line_to(_width/2 - calculated_width/2 - _hpad, calculated_height/2),
			c.stroke(),

			c.move_to(_width/2 + calculated_width/2 + _hpad, calculated_height/2),
			c.line_to(_width - _hpad, calculated_height/2),
			c.stroke(),

			c.translate(_width/2 - calculated_width/2, 0),
			map(fragments, [
				c.set_source_color([0.4,0.4,0.6,1]),
				c.save(),
				value.path,
				c.fill(),
				c.restore(),
			])
		])),
		]

		where calculated_width = sum(map(fragments, value.x_advance))
		where calculated_height = int(max(map(fragments, value.y + value.height))) + 1
		where fragments = c.markup_text(q(<font weight='65' size=') + str(_font_size) + q('>) + text + q(</font>), { width: _width })
		where c = canvas()
		",
	},
}
