{
	id: "settings_screen",
	is_strict: true,

	zorder: 100000,

	properties: {
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		//the left/right side of the 'usable' area -- i.e. cutting off edges
		//to make for a 4:3 display.
		gui_left_edge: "int :: (level_width - (level_height*4)/3)/2",
		gui_right_edge: "int :: level_width - gui_left_edge",

		pane_a_left: "int :: gui_left_edge + lib.gui.py(100)",
		pane_b_left: "int :: gui_right_edge - lib.gui.py(100) - pane_width",
		pane_width: "int :: lib.gui.py(180)",

		_paused: { type: "[custom_obj]", default: [] },
		_exclude_from_pause: { type: "[custom_obj]", default: [] },

		title_controller: { type: "obj matchmaking_core" },

		close_handler: { type: "null|function()->commands" },

		close_settings: "def()->commands execute(me, [
			if(_need_restart and _can_restart, update_and_restart());

			[set(c.paused, false) | c <- level.chars],
			remove_object(me)
			; _preferences.save_preferences()
			; if(close_handler,
			close_handler(),

			if(title_controller is obj title_controller,
			[
				remove_object(title_controller),
				add_object(title_controller),
				title_controller.show_ui(),
			]))
		])",

		_video_settings_modified_label: { type: "null|obj label" },

		set_fullscreen: "def(bool value) ->commands [
			if(_video_settings_modified_label = null,
				if(_can_restart = false,
				spawn('label', 0, 0, {
					mid_x: level_width/2,
					y: y + lib.gui.py(avatar_height + 131),
					_color: [1,1,1,1],
					_halign: 'center',
					_valign: 'top',
					_text: ['Video mode settings will be',
					        'applied on game restart.'],
					zorder: zorder+10,
					_font_size: lib.gui.py(14),

				}, [
					set(_video_settings_modified_label, child)
				])
				)
			),

			set(_need_restart, not _need_restart);

			debug(['SET PREFERENCE', value]);
			_preferences.set_preference_value('desktop_fullscreen', value, [enum persistent]);
			_preferences.save_preferences()
		]",

		_need_restart: { type: "bool", default: false },
		_can_restart: { type: "bool", default: false },

		_avatar_pane: { type: "null|obj scrollable_pane" },
		_avatar_dialog: { type: "null|obj modal_message_dialog" },

		_create_avatar: "def(string avatar) ->custom_obj
			object('player_avatar', {
				player_num: 0,
				_avatar: avatar,
				_width: int(pane_width*0.8),
				_height: int(pane_width*0.8),
				_nick: '',
				zorder: zorder+15,
				facing: 1,
				highlight: true,
				current_desaturation: 0.5,
				target_desaturation: 0.5,
				click_handler: (def(obj player_avatar a) ->commands [set_avatar(avatar)]),
				mouse_enter_handler: (def(obj player_avatar a) ->commands set(a.target_desaturation, 0.0)),
				mouse_leave_handler: (def(obj player_avatar a) ->commands set(a.target_desaturation, 0.5)),
			})
		",

		set_avatar: "def(string avatar) ->commands
		[
			remove_object(_avatar_pane),
			set(_avatar_pane, null),
			remove_object(_avatar_dialog),
			set(_avatar_dialog, null),
			title_controller.set_avatar(avatar),
		]
		",

		_change_password_button: { type: "null|obj button_controller" },
		_change_password_label: { type: "null|obj label" },
		password_changed: "def() ->commands
		if(_passwords_match,
		   if(_change_password_button = null,

			[
			remove_object(_change_password_label),
			set(_change_password_label, null),

			spawn('button_controller', 0, 0, {
				mid_x: level_width/2,
				y: y + lib.gui.py(avatar_height + 419),
				button_width: pane_width,
				button_height: lib.gui.py(25),
				text: 'Change Password',
				_font_size: lib.gui.py(14),
				on_click: me.change_password,
				zorder: zorder+20,
			}, [
				set(me._change_password_button, child),
			]),
			]
		   ),

		   if(_change_password_label = null and _passwd_entry != null and _confirm_passwd_entry != null and (_passwd_entry.has_focus or _confirm_passwd_entry.has_focus),
		   [
		   		remove_object(_change_password_button),
		   		set(me._change_password_button, null),

				spawn('label', 0, 0, {
					mid_x : level_width/2,
					y: y + lib.gui.py(avatar_height + 405),
					_font_size: lib.gui.py(14),
					_halign: 'center',
					_text: ['Passwords do not match'],
					_color: [1,0,0,1],
					zorder: zorder+10,
				}, [
					set(me._change_password_label, child)
				]),
		   ]
		   )
		)
		",

		_passwords_match: "bool ::
			_passwd_entry != null and _confirm_passwd_entry != null and _passwd_entry.text != '' and _passwd_entry.text = _confirm_passwd_entry.text
		",

		change_password: "def() ->commands
		if(new_passwd and _passwords_match, title_controller.reset_passwd(new_passwd))
			where new_passwd = if(_passwd_entry and _passwd_entry.text != 'Change Password', _passwd_entry.text)
		",

		_passwd_entry: { type: "null|obj text_entry" },
		_confirm_passwd_entry: { type: "null|obj text_entry" },

		change_avatar: "def() ->commands
		if(_possible_avatars,
		if(_avatar_pane != null,
		[
			remove_object(_avatar_dialog),
			set(_avatar_dialog, null),
			remove_object(_avatar_pane),
			set(_avatar_pane, null),
		],
		[

			set(_avatar_dialog, modal_dialog),
			modal_dialog.show_dialog(),

			spawn('scrollable_pane', 0, 0, {
				x: pane_b_left - pane_width*3,
				y: lib.gui.py(120),
				area_width: pane_width*3,
				area_height: lib.gui.py(560),
				zorder: me.zorder+100,
				focus_override: true,

				elements: [],
				pending_elements: map(_possible_avatars,
					{
						create: bind(me._create_avatar, value),
						xpos: pane_width*(index%3),
						ypos: pane_width*(index/3),
						height: pane_width,
					}
				),
			}, [
				set(me._avatar_pane, child),
			]);

			if(_avatar_pane, _avatar_pane.recalculate())
		]
		where modal_dialog = object('modal_message_dialog', {
				_exclude_from_pause: level.chars,
				mid_x: level.dimensions[2]/2,
				mid_y: level.dimensions[3]/2,
				zorder: me.zorder + 90,
				min_width: lib.gui.py(800),
				min_height: lib.gui.py(600),
				message: '',
				buttons: [{
					text: 'Close',
					callback: me.change_avatar,
				}]
			})
		
		)
		)",

		_possible_avatars: { type: "[string]" },

		_displayed_avatar: { type: "null|string" },
		_avatar: { type: "null|obj player_avatar" },
		_show_avatar: "def() ->commands if(_possible_avatars and title_controller.account_info.avatar, [
			set(_displayed_avatar, title_controller.account_info.avatar),
			remove_object(_avatar),
			spawn('player_avatar', 0, 0, {
				player_num: 0,
				_avatar: title_controller.account_info.avatar,
				zorder: zorder+15,
				_top: y + lib.gui.py(50),
				_width: int(pane_width*0.8),
				_height: int(pane_width*0.8),
				_edge: mid_x - int(pane_width*0.8/2),
				_nick: '',
				facing: 1,
				highlight: true,
				current_desaturation: 0.0,
				target_desaturation: 0.0,
			}, [
				set(_avatar, child),
			]),
		])",

		show_dialog: "def() ->commands [

			spawn('label', 0, 0, {
				mid_x: level_width/2,
				y: y + lib.gui.py(0),
				_font_size: lib.gui.py(24),
				_halign: 'center',
				_text: ['Settings'],
				zorder: zorder+10,
			}),

			spawn('label', 0, 0, {
				mid_x: level_width/2,
				mid_y: y + lib.gui.py(avatar_height + 54),
				_force_width: pane_width,
				_force_height: lib.gui.py(25),
				_font_size: lib.gui.py(18),
				_halign: 'center',
				_text: ['Video'],
				_bg_color: [0.5,0.5,0.5,1.0],
				zorder: zorder+10,
			}),

			spawn('label', 0, 0, {
				mid_x: level_width/2,
				mid_y: y + lib.gui.py(avatar_height + 185),
				_force_width: pane_width,
				_force_height: lib.gui.py(25),
				_font_size: lib.gui.py(18),
				_halign: 'center',
				_text: ['Sound'],
				_bg_color: [0.5,0.5,0.5,1.0],
				zorder: zorder+10,
			}),

			spawn('label', 0, 0, {
				mid_x: level_width/2,
				mid_y: y + lib.gui.py(avatar_height + 325),
				_force_height: lib.gui.py(25),
				_force_width: pane_width,
				_font_size: lib.gui.py(18),
				_halign: 'center',
				_text: ['Account'],
				_bg_color: [0.5,0.5,0.5,1.0],
				zorder: zorder+10,
			}),

			if(_possible_avatars, [

				_show_avatar(),

				spawn('button_controller', 0, 0, {
					mid_x: mid_x,
					y: y + lib.gui.py(200),
					button_width: int(pane_width),
					button_height: lib.gui.py(25),
					_font_size: lib.gui.py(16),
					text: 'Change Avatar',
					on_click: me.change_avatar,
					zorder: zorder+20,
				}, [
				]),
			]),

			spawn('text_entry', {
				x: level_width/2 - pane_width/2,
				y: y + lib.gui.py(avatar_height + 355),
				_width: pane_width,
				zorder: zorder+20,
				default_text: 'New Password',
				_password: true,
				_on_enter: me.change_password,
				_on_tab: (def() ->commands if(me._confirm_passwd_entry and me._passwd_entry, ;[set(me._confirm_passwd_entry.has_focus, true)])),
				_on_change: me.password_changed,
			}, [
				set(me._passwd_entry, child),
			]),

			spawn('text_entry', {
				x: level_width/2 - pane_width/2,
				y: y + lib.gui.py(avatar_height + 385),
				_width: pane_width,
				zorder: zorder+20,
				default_text: 'Confirm Password',
				_password: true,
				_on_enter: me.change_password,
				_on_tab: (def() ->commands if(me._confirm_passwd_entry and me._passwd_entry, ;[set(me._passwd_entry.has_focus, true)])),
				_on_change: me.password_changed,
			}, [
				set(me._confirm_passwd_entry, child),
			]),
			
			spawn('button_controller', {
				text: 'Fullscreen',
				on_click: (def()->commands me.set_fullscreen(not _preferences.get_bool_preference_value('desktop_fullscreen'))),
				mid_x: level_width/2,
				y: y + lib.gui.py(avatar_height + 76),
				_font_size: lib.gui.py(18),
				checked: _preferences.get_bool_preference_value('desktop_fullscreen'),
				button_width: int(pane_width*0.8),
				button_height: lib.gui.py(25),
				zorder: zorder+10,
			}, [
			]),
			
			spawn('button_controller', {
				text: 'High Detail',
				on_click: (def()->commands _preferences.set_preference_value('skip_odd_frames', not _preferences.get_bool_preference_value('skip_odd_frames'))),
				mid_x: level_width/2,
				y: y + lib.gui.py(avatar_height + 110),
				_font_size: lib.gui.py(16),
				checked: not _preferences.get_bool_preference_value('skip_odd_frames'),
				button_width: int(pane_width*0.8),
				button_height: lib.gui.py(25),
				zorder: zorder+10,
			}, [
			]),

			spawn('button_controller', 0, 0, {
				mid_x: level_width/2,
				y: y + lib.gui.py(avatar_height + 452),
				button_width: pane_width,
				button_height: lib.gui.py(25),
				on_click: me.close_settings,
				_font_size: lib.gui.py(18),
				text: 'Close',
				zorder: zorder+10,
				trap_escape: true,
			}, [
			]),

			spawn('slider_widget', 0, 0, {
				x: level_width/2 - pane_width/2,
				y: y + lib.gui.py(avatar_height + 225),
				slider_width: pane_width,
				slider_height: lib.gui.py(20),
				slider_value: _preferences.sound_volume,
				zorder: me.zorder+10,
				value_change_handler: me._change_sound_volume,
			}, [
				set(me._sound_slider, child),
			]),

			spawn('slider_widget', 0, 0, {
				x: level_width/2 - pane_width/2,
				y: y + lib.gui.py(avatar_height + 275),
				slider_width: pane_width,
				slider_height: lib.gui.py(20),
				slider_value: _preferences.music_volume,
				zorder: me.zorder+10,
				value_change_handler: me._change_music_volume,
			}, [
				set(me._music_slider, child),
			]),

			_change_music_volume(_preferences.music_volume),
			_change_sound_volume(_preferences.sound_volume),
		]",

		avatar_height: "if(_possible_avatars, 200, 0)",

		_preferences: "game_preferences :: game_preferences()",

		_change_sound_volume: "def(decimal value) ->commands
		[
			remove_object(_sound_label),
			set(_preferences.sound_volume, value),
			spawn('label', 0, 0, {
				x: level_width/2 - pane_width/2,
				y: y + lib.gui.py(avatar_height + 205),
				_halign: 'left',
				_valign: 'top',
				zorder: zorder+10,
				_font_size: lib.gui.py(14),
				_text: ['Sound Effects: ' + str(int(100*value))],
			}, [
				set(me._sound_label, child),
			]),
		]
		",

		_change_music_volume: "def(decimal value) ->commands
		[
			remove_object(_music_label),
			set(_preferences.music_volume, value),
			spawn('label', 0, 0, {
				x: level_width/2 - pane_width/2,
				y: y + lib.gui.py(avatar_height + 255),
				_halign: 'left',
				_valign: 'top',
				zorder: zorder+10,
				_font_size: lib.gui.py(14),
				_text: ['Music: ' + str(int(100*value))],
			}, [
				set(me._music_label, child),
			]),
		]
		",

		_sound_slider: { type: "null|obj slider_widget" },
		_music_slider: { type: "null|obj slider_widget" },

		_sound_label: { type: "null|obj label" },
		_music_label: { type: "null|obj label" },

		render: "def() ->commands [
		set(animation, lib.gui.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.3, 0.3, 0.3, 1.0),
			c.fill(),

			c.rectangle(0,0,ww,hh),
			c.set_line_width(lib.gui.dpy(3.0)),
			c.set_source_rgba(0.40, 0.42, 0.45, 1.0),
			c.stroke(),
		]))

		] where ww = lib.gui.py(206)
		  where hh = lib.gui.py(avatar_height + 486)
		  where c = canvas()",
	},

	on_process: "
	if(_displayed_avatar != title_controller.account_info.avatar,
	   _show_avatar())
	",

	on_create: "[
		[[set(c.paused, true), add(_paused, [c])] | c <- level.chars, c != me, c != title_controller, c not in _exclude_from_pause, c.paused = false],
		render();
		show_dialog(),
	]",

	on_being_removed: "[
		[set(c.paused, false) | c <- _paused],
		map(spawned_children, remove_object(value)),
	]",

	on_type_updated: "[
		fire_event('being_removed'),
		fire_event('create'),
	]",
}
