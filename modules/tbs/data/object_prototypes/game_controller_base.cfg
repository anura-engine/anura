{
	id: "game_controller_base",
	is_human: true,
	hidden_in_game: true,
	is_strict: true,

	prototype: ["matchmaking_base"],

	properties: {
		session_id: { type: "int" },

		game_server_address: { type: "null|string" },
		game_server_port: { type: "int", default: "@eval TBS_SERVER_PORT" },

		create_tbs_client: "def() ->object
		  if(game_server_address != null, tbs_client(game_server_address, game_server_port, session_id), tbs_internal_client(session_id))
		",

		_animation_blocked: { type: "int", default: 0 },
		_animation_reason: { type: "string", default: "" },

		client: "object<- _client",
		_client: { type: "null|object" },

		state: "class game_state<- _state",
		_state: { type: "null|class game_state" },
		_state_id: { type: "int", default: -1 },
		_most_recent_state_id_known: "int<- max([_state_id] + map(_game_state_queue, int<- value.state_id))",
		_game_state_queue: { type: "[map]", default: [] },

		_process_game_state: "def(map message) ->commands
		if(message.state_id > _state_id,
			if(new_state is class game_state,
			[
				set(_state_id, int<- message.state_id),

				if(_state != null and _state._uuid = new_state._uuid,
				   if(new_state.animations and message.state_id = _state_id+1 and (new_state.last_message_unique_id not in _animations_predicted),
					present_animations_blocking(new_state.animations)
				   );
				   update_object(_state, new_state),
				   set(_state, new_state)
				);

				present_game_state();

				if(state.game_over,
					present_game_over()
				)
			], [
				debug('failed to delta state')
			])
			where new_state = if(message.delta, get_game_state_from_delta(int<- message.delta_basis, message.delta), message.state)
		)	
		",

		present_animations_blocking: "def([class animation] animations) ->commands
			if(animations,
				add(_animation_blocked, 1);
				set(_animation_reason, 'animation');
				present_animation_blocking(animations[0]);
				add(_animation_blocked, -1);
				present_animations_blocking(animations[1:])
			)
		",

		present_animation_blocking: "def(class animation anim) ->commands
			null
		",

		present_game_state: "def() ->commands
			null
		",

		present_game_over: "def() ->commands
			remove_object(_disconnection_dialog);
			set(_disconnection_dialog, null);

			spawn('modal_message_dialog', {
				mid_x: level_width/2,
				mid_y: level_height/2,
				message: if(state.winner_index = state.nplayer, 'You Win', state.winner_index >= 0, 'You Lose', 'Draw'),
				_stack_buttons_vertically: true,
				buttons: if(me.rematch, [{
					text: 'Rematch',
					callback: def() ->commands me.rematch(state.winner_index = state.nplayer, state),
				}], []) + [{
					text: 'Leave',
					callback: def() ->commands me.return_from_game(state.winner_index = state.nplayer, state),
				}],
			}, [
				child.show_dialog()
			])
		",

		get_game_state_from_delta: "def(int delta_basis, any delta) ->class game_state|null
		if(base_state != null, class game_state<- apply_delta(base_state, delta))

		where base_state = if(_state and _state_id = delta_basis, _state)
		",

		pump_client: "def() ->commands
		[
			tbs_process(client),
			if(client.in_flight = 0, [
				tbs_send(client, {
					type: 'request_updates',
					state_id: _most_recent_state_id_known,
					allow_deltas: _state != null,
				})
			]),
		]
		",

		_animations_predicted: { type: "[string]", default: [] },

		send: "def(map msg, {predict: null|bool} options={}) ->commands
		execute(me, [
			tbs_send(client, msg + {unique_id: unique_id}),

			if(options['predict'], [
				add(_animations_predicted, [unique_id]),
				present_animations_blocking(modified_game.animations)
				where modified_game = get_modified_object(state,
					def(class game_state g) ->commands set(g.animations, []);
					                      g.handle_message(class message<- construct('message.' + (string<- msg.type), msg + {player: g.nplayer}))
				)
			]
			)
		])
		where unique_id = generate_uuid()
		",

		click_challenge: "def(string username) ->commands
			quit_game()
		",

		return_from_game: { type: "function(bool, null|class game_state) ->commands" },
		rematch: { type: "null|function(bool, null|class game_state) ->commands" },
		quit_game: "def() ->commands return_from_game(false, null)",

		player_disconnect: "def(string player) ->commands
		if(_disconnection_dialog,
			set(_disconnection_dialog[player], 1),
		   spawn('disconnection_dialog', {
			_controller: me,
			disconnected_players: {(player): 1},
		   }, [
		   	set(_disconnection_dialog, child)
		   ])
		)",
		player_reconnect: "def(string player) ->commands
		if(_disconnection_dialog,
			set(_disconnection_dialog.disconnected_players, remove_from_map(_disconnection_dialog.disconnected_players, player));

			if(_disconnection_dialog.disconnected_players = {} and _disconnection_dialog.disconnected_server = false,
			[
				remove_object(_disconnection_dialog),
				set(_disconnection_dialog, null),
			])
		)",

		screen_width: "int :: level.dimensions[2]",
		screen_height: "int :: level.dimensions[3]",
	
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		_disconnection_dialog: { type: "null|obj disconnection_dialog" },
	},

	events: {
		create: "set(_client, create_tbs_client())",

		process: "
		if(_client, pump_client());
		[

			if(_game_state_queue and _animation_blocked <= 0,
			   let item = _game_state_queue[0];
			   set(_game_state_queue, _game_state_queue[1:]);
			   _process_game_state(item)
			)
		]",

		message_received: "
		if(_disconnection_dialog and _disconnection_dialog.disconnected_server,
			remove_object(_disconnection_dialog);
			set(_disconnection_dialog, null)
		);
		[
//			debug(['RECV:', message]);
			switch(message.type,
			'game', [
				add(_game_state_queue, [message]),
			], 'player_disconnect',
				player_disconnect(string<- message.player),
			'player_reconnect',
				player_reconnect(string<- message.player)
			)

		]
		where message = map<- arg.message",

		"+connection_error": "
		if(_disconnection_dialog,
			set(_disconnection_dialog.disconnected_server, true),
		   spawn('disconnection_dialog', {
			_controller: me,
			disconnected_server: true,
		   }, [
		   	set(_disconnection_dialog, child)
		   ])
		)
		",

		settings_menu: "
		if(level.show_builtin_settings_dialog,
		[
			set(level.show_builtin_settings_dialog, false),

			if(menu, remove_object(menu),
			spawn('game_menu_controller', {
				_exclude_from_pause: [me],
				buttons: [
				{
					text: 'Resume',
					callback: (def()->commands null),
				},
				{
					text: 'Leave Game',
					callback: me.quit_game,
				},
				]
			})
			)
		]
		where menu = find(level.chars, value is obj game_menu_controller)
		)
		",
	},
}
