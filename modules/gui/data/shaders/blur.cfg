{
	instances: [

	{
		name: "background_blur",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
           	#version 120

vec4 blur9(sampler2D image, vec2 uv, float resolution) {

	vec4 color = vec4(0.0);
	vec2 off1 = vec2(1.3846153846,0);
	vec2 off2 = vec2(3.2307692308,0);
	color += texture2D(image, uv) * 0.2270270270;
	color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;
	color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;
	color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;
	color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;
	return color;
}

			uniform sampler2D u_anura_tex_map;
			uniform float u_blend_factor;
			uniform vec4 u_area;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				if(v_texcoord[0] > u_area[0] && v_texcoord[0] < u_area[2] &&
				   v_texcoord[1] > u_area[1] && v_texcoord[1] < u_area[3]) {
				  
					float area_width = u_anura_draw_area[2] - u_anura_draw_area[0];
					gl_FragColor = blur9(u_anura_tex_map, v_texcoord, area_width);

				} else {
					gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
				}

				if(gl_FragColor[3] > 0.0 && gl_FragColor[3] < 1.0) {
					gl_FragColor[3] = sqrt(gl_FragColor[3]);
				}
			}
		",

		draw: "[
			if(blur_controller,
			[
			  set(uniform_commands.u_blend_factor, blur_controller.blur_amount*0.5),
			  set(uniform_commands.u_area, blur_controller.effect_area),
			], [
			  set(uniform_commands.u_blend_factor, 2.0),
			  set(uniform_commands.u_area, [0,0,1,1]),
			]
			) where blur_controller = find(level.chars, value is obj blur_controller)
		]",
	},

	{
		name: "background_blur_hor",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
           	#version 120
			uniform sampler2D u_anura_tex_map;
			uniform float u_blend_factor;
			uniform vec4 u_area;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				if(v_texcoord[0] > u_area[0] && v_texcoord[0] < u_area[2] &&
				   v_texcoord[1] > u_area[1] && v_texcoord[1] < u_area[3]) {
				  
					float gaussian[9] = float[](0.06, 0.09, 0.12, 0.15, 0.16, 0.15, 0.12, 0.09, 0.06);
					float area_width = u_anura_draw_area[2] - u_anura_draw_area[0];
					gl_FragColor = vec4(0, 0, 0, 0);
					int index = 0;
					for(float x = -4.0; x <= 4.0; x += 1.0) {
						gl_FragColor = gl_FragColor + texture2D(u_anura_tex_map, v_texcoord + vec2((x*u_blend_factor)/area_width, 0))*gaussian[index];
						++index;
					}
				} else {
					gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
				}

				if(gl_FragColor[3] > 0.0 && gl_FragColor[3] < 1.0) {
					gl_FragColor[3] = sqrt(gl_FragColor[3]);
				}
			}
		",

		draw: "[
			if(blur_controller,
			[
			  set(uniform_commands.u_blend_factor, blur_controller.blur_amount*0.5),
			  set(uniform_commands.u_area, blur_controller.effect_area),
			], [
			  set(uniform_commands.u_blend_factor, 1),
			  set(uniform_commands.u_area, [0,0,1,1]),
			]
			) where blur_controller = find(level.chars, value is obj blur_controller)
		]",
	},

	{
		name: "background_blur_ver",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			#version 120
			uniform sampler2D u_anura_tex_map;
			uniform float u_blend_factor;
			uniform float u_darken;
			uniform vec4 u_area;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				if(v_texcoord[0] > u_area[0] && v_texcoord[0] < u_area[2] &&
				   v_texcoord[1] > u_area[1] && v_texcoord[1] < u_area[3]) {
					float gaussian[9] = float[](0.06, 0.09, 0.12, 0.15, 0.16, 0.15, 0.12, 0.09, 0.06);
					float area_height = u_anura_draw_area[3] - u_anura_draw_area[1];
					gl_FragColor = vec4(0, 0, 0, 0);
					int index = 0;
					for(float y = -4.0; y <= 4.0; y += 1.0) {
						gl_FragColor = gl_FragColor + texture2D(u_anura_tex_map, v_texcoord + vec2(0, (y*u_blend_factor)/area_height))*gaussian[index];
						++index;
					}

					gl_FragColor *= (1.0 - u_darken);
				} else {
					gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
				}

				if(gl_FragColor[3] > 0.0 && gl_FragColor[3] < 1.0) {
					gl_FragColor[3] = sqrt(gl_FragColor[3]);
				}
			}
		",

		draw: "[
			if(blur_controller,
			[
			  set(uniform_commands.u_blend_factor, blur_controller.blur_amount*0.5),
			  set(uniform_commands.u_darken, blur_controller.blur_darken),
			  set(uniform_commands.u_area, blur_controller.effect_area),
			], [
			  set(uniform_commands.u_blend_factor, 1),
			  set(uniform_commands.u_darken, 0.0),
			  set(uniform_commands.u_area, [0,0,1,1]),
			]

			) where blur_controller = find(level.chars, value is obj blur_controller)
		]",
	},
	]
}
