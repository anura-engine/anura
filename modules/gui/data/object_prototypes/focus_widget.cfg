{
	//defines any kind of widget which can have focus.
	//handles negotiation of focus with other widgets.
	id: "focus_widget",
	is_strict: true,

	properties: {
		_focus_set_time: { type: "int", default: 0 },
		has_focus: {
			default: false,
			set: "if(value != _data, [
				set(_last_keys, null),
				set(_focus_set_time, level.cycle),
				set(_data, value),
				if(value, [
					set(c.has_focus, false) |
					c <- level.chars,
					c is obj focus_widget,
					c != me
				]),
				if(value,
				   [on_focus(), if(_on_focus, _on_focus())],
				   [on_lose_focus(), if(_on_lose_focus, _on_lose_focus())]
				 )
			])"
		},

		on_focus: "def() ->commands null",
		on_lose_focus: "def() ->commands null",

		_on_focus: { type: "null|function()->commands" },
		_on_lose_focus: { type: "null|function()->commands" },

		prev_widget: { type: "null|obj focus_widget" },
		next_widget: { type: "null|obj focus_widget" },

		get_next_widget: "def(bool reverse=false) ->null|obj focus_widget
		if(reverse = false and next_widget != null and next_widget in chars, next_widget,
		   reverse = true  and prev_widget != null and prev_widget in chars, prev_widget,
		find(ordered, value is obj focus_widget)
			where ordered = if(n = 0, chars, chars[n+1:] + chars[:n])
			where n = index(chars, me)
		)
		where chars = if(reverse, reverse(level.chars), level.chars)
		",

		_last_keys: { type: "null|list" },
		_keys_pressed: { type: "list", default: [] },

		_key_pressed: "def(string|int key) ->bool key in _keys_pressed",

		on_enter: "def() ->commands null",

		_on_enter: { type: "null|function()->commands" },
		_on_enter_arg: { type: "null|function(obj text_entry)->commands" },
		_on_tab: { type: "null|function()->commands" },
		_on_prev: { type: "null|function()->commands" },

		_tab_buttons: { type: "[string|int]", default: ['Tab'] },
		_prev_buttons: { type: "[string|int]", default: [] },

		_enter_buttons: { type: "[string|int]", default: ['Return'] },

		_enter_pressed: "bool :: find(_enter_buttons, _key_pressed(value)) != null",
		_tab_pressed: "bool :: find(_tab_buttons, _key_pressed(value)) != null",
		_prev_pressed: "bool :: find(_prev_buttons, _key_pressed(value)) != null",

		_key_control: "bool :: ((level.player.ctrl_mod_key/64)%4 > 0)",
		_key_shift: "bool :: (level.player.ctrl_mod_key%4 > 0)",

		_key_backspace: "bool :: 'Backspace' in level.player.ctrl_keys",
		_key_delete: "bool :: 'Delete' in level.player.ctrl_keys",

		_key_home: "bool :: 'Home' in level.player.ctrl_keys",
		_key_end: "bool :: 'End' in level.player.ctrl_keys",
	},

	events: {
		process: "if(has_focus, [
			if(_last_keys = level.player.ctrl_keys,
			   set(_keys_pressed, []),
			[
				set(_keys_pressed, filter(level.player.ctrl_keys, _last_keys != null and value not in _last_keys)),
				set(_last_keys, level.player.ctrl_keys),
			]; [
				if(_enter_pressed, on_enter()),
				if(_enter_pressed and _on_enter, _on_enter()),
				if(_enter_pressed and me is obj text_entry and _on_enter_arg, _on_enter_arg(me)),
				if(_tab_pressed and level.cycle > _focus_set_time+3,
					if(_on_tab,
					   _on_tab(),
					   if(next != null, set(next.has_focus, true))
					     where next = get_next_widget(_key_shift)
					)
				),

				if(_prev_pressed and level.cycle > _focus_set_time+3,
					if(_on_prev,
					   _on_prev(),
					   if(next != null, set(next.has_focus, true))
					     where next = get_next_widget(true)
					)
				),

			]),
		])",
	},
}
