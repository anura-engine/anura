{
id: "text_area_base",
is_strict: true,
always_active: true,

types: {
	ObjPreview: "{ x: decimal, y: decimal, width: decimal, height: decimal, info: string }",
},

properties: {
	_text: { type: "string" },

	set_text: "def(string t) ->commands
		set(_text, t);
		render()
	",

	text_width: { type: "int" },	
	min_width: { type: "int", default: 0 },
	min_height: { type: "int", default: 0 },

	_get_text_width: "int ::
	int(
	(decimal<- max([0.0] + map(fragments, value.x + value.width))) - (decimal<- min([0.0] + map(fragments, value.x)))) + 4

		where fragments = c.markup_text(_text, { width: text_width, scale: lib.gui.py(1000)/1000.0 })
		where c = canvas()
	",

	_get_height: "int ::
	max(min_height,
		int(max(map(fragments, value.y + value.height)) or 6) + 2
		where fragments = c.markup_text(_text, { width: text_width, scale: lib.gui.py(1000)/1000.0 })
		where c = canvas()
	)
	",

	border_bot: { default: 0 },
	border: { default: 0 },
	border_sides: { default: 0 },
	bg_color: { type: "null|[decimal,decimal,decimal,decimal]" },
	bg_border_color: { type: "null|[decimal,decimal,decimal,decimal]" },
	bg_border_width: { type: "decimal", default: 1.0 },
	bg_image: { type: "null|string" },

	on_click: { type: "null|function()->commands" },
	on_mouse_enter: { type: "null|function()->commands" },
	on_mouse_leave: { type: "null|function()->commands" },

	obj_preview_entries: { type: "[ObjPreview]", default: [] },
	_obj_preview: { type: "null|custom_obj", set: "if(_data != value, [remove_object(_data), set(_data, value)])" },
	_obj_preview_info: { type: "null|string" },

	_create_preview_object: "def(ObjPreview info) ->commands null",

	url_entries: { type: "[{ x: decimal, y: decimal, width: decimal, height: decimal, url: string }]", default: [] },
	_selected_url: { type: "null|string" },

	_cursor_hand: { type: "bool", default: false, set: "if(_data != value, [set(_data, value), if(value, lib.gui.add_mouse_cursor('HAND'), [lib.gui.remove_mouse_cursor('HAND'), set(_selected_url, null)])])" },

	render: "def() ->commands
	[
	set(url_entries, []),
	set(obj_preview_entries, []),

	map(fragments,
	[
		if(obj_preview is string,
			add(obj_preview_entries, [{ x: value.x, y: value.y, width: value.width, height: value.height, info: obj_preview[4:]}])
		)
	]
	where obj_preview = find(value.tag, regex_match(value, 'obj:(.*)'))
	),

	map(fragments,
		if(url is string,
			add(url_entries, [{ x: value.x, y: value.y, width: value.width, height: value.height, url: url}])
		)
	where url = find(value.tag, regex_match(value, 'https?://.*'))
	),

	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1,
		frames: 1,
		force_no_alpha: true,

		fbo: fbo,

	})
	where fbo = c.render(ww, hh,
		[

			if(bg_color, [
				c.save(),
				c.rectangle(0,0,ww+1,hh+1),
				c.set_source_rgba(bg_color[0], bg_color[1], bg_color[2], bg_color[3]),
				c.fill(),
				c.restore(),
			]),

			if(bg_border_color, [
				c.save(),
				c.set_line_width(bg_border_width),
				c.rectangle(0,0,ww,hh),
				c.set_source_rgba(bg_border_color[0], bg_border_color[1], bg_border_color[2], bg_border_color[3]),
				c.stroke(),
				c.restore(),
			]),

			if(bg_image, [
				c.save(),
				c.scale(decimal(ww)/decimal(dim[0]), decimal(hh)/decimal(dim[1])),
				c.paint_image(bg_image),
				c.restore(),
			] where dim = c.image_dim(bg_image)),

			c.translate(ww/2 - text_width/2, border+2),
			map(fragments, [
				c.save(),
				c.set_source_color(value.color),
				if(obj_tag != null, c.set_source_color([0.7,0.7,1,1])),
				if(url != null,
					if(lib.gui.have_visited_url(url),
						c.set_source_color([1.0,0.7,1,1]),
						c.set_source_color([0.7,0.7,1,1])
					)
				),
			    value.path,
				c.fill(),
				c.restore(),
			] where url = find(value.tag, regex_match(value, 'http://.*'))
			  where obj_tag = find(value.tag, regex_match(value, 'obj:.*'))
			),

		]),
	
	] where ww = round_to_even(max(min_width, text_width + border*2 + border_sides*2 + 1))
	  where hh = round_to_even(_get_height + border*2 + border_bot + 1)
	  where text_width = _get_text_width
	  where fragments = c.markup_text(_text, { width: text_width, scale: lib.gui.py(1000)/1000.0 })
	  where c = canvas()
	",
},

on_create: "[
	render(),
]",

on_click: "[if(_selected_url is string, open_url(_selected_url); lib.gui.record_visited_url(_selected_url); render()), if(on_click, on_click())]",
on_mouse_enter: "if(on_mouse_enter, on_mouse_enter())",
on_mouse_leave: "[set(_obj_preview, null), set(_cursor_hand, false), if(on_mouse_leave, on_mouse_leave())]",
on_mouse_move: "[
	set(_cursor_hand, url != null),
	set(_selected_url, if(url != null, url.url)),

	if(info = null, set(_obj_preview, null),
		if(_obj_preview = null or _obj_preview_info != info.info, [
			set(_obj_preview_info, info.info),
			_create_preview_object(info),
		])
	)

] where url = find(url_entries, mx > value.x and mx < value.x+value.width and my > value.y and my < value.y+value.height)
  where info = find(obj_preview_entries, mx > value.x and mx < value.x+value.width and my > value.y and my < value.y+value.height)
  where mx = lib.gui.mouse_pos(level)[0] - x
  where my = lib.gui.mouse_pos(level)[1] - y",

on_being_removed: "set(_cursor_hand, false)",


}
