{
	_mouse_cursor_stack: { type: "[string]", default: ['ARROW'] },

	add_mouse_cursor: "def(string cursor) ->commands [
		set(_mouse_cursor_stack, [cursor] + _mouse_cursor_stack),
		set_mouse_cursor(cursor),
	]",

	remove_mouse_cursor: "def(string cursor) ->commands [
	if(n != -1, [
		set(_mouse_cursor_stack, _mouse_cursor_stack[:n] + _mouse_cursor_stack[n+1:]);
		set_mouse_cursor(_mouse_cursor_stack[0])
	])
		where n = index(_mouse_cursor_stack, cursor)
	]",

	mouse_pos: "def(level lvl) ->[int,int]
		[int<- lvl.player.ctrl_mice[0][0], (int<-lvl.player.ctrl_mice[0][1]) - lvl.absolute_object_adjust_y]
	",

	set_screen_dim: "def(int w, int h) [
		set(screen_width, w),
		set(screen_height, h),
	]",

	set_screen_dimensions: "def(level lvl) [
		set(screen_width, lvl.dimensions[2]),
		set(screen_height, lvl.dimensions[3]),
	]",

	screen_width: { type: "int", init: "SCREEN_WIDTH" },
	screen_height: { type: "int", init: "SCREEN_HEIGHT" },

	px: "def(int pixels) ->int if(screen_width > 1440, if(res%2 = 1, res+1, res), pixels) where res = int((decimal(pixels)*decimal(screen_width))/1440.0)",
	py: "def(int pixels) ->int if(screen_height > 900, if(res%2 = 1, res+1, res), pixels)  where res = int((decimal(pixels)*decimal(screen_height))/900.0)",

	py_scale: "decimal(screen_height)/900.0",

	dpx: "def(decimal pixels) ->decimal pixels*screen_width/1440.0",
	dpy: "def(decimal pixels) ->decimal pixels*screen_height/900.0",

	render_future: "def(cairo_callable c, int w, int h, cairo_commands cmd, map|null m=null) ->texture_object_future
	c.render_async(ww, hh, cmd, m)
	  where ww = if(round_to_even(w) != w, w+1, w)
	  where hh = if(round_to_even(h) != h, h+1, h)",
	
	complete_render_future: "def(texture_object t, int w, int h, map args={}) ->frame
	build_animation(
	{
		fbo: t,
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		frames: 1, scale: 1,
		no_remove_alpha_borders: true,
	} + args
	) where ww = if(round_to_even(w) != w, w+1, w)
	  where hh = if(round_to_even(h) != h, h+1, h)",
	
	empty_frame: "def(int w, int h) ->frame
	build_animation(
	{
		image: 'empty.png',
		id: 'empty',
		x: 0, y: 0, w: ww, h: hh,
		frames: 1, scale: 1,
		no_remove_alpha_borders: true,
		allow_wrapping: true,
	}) where ww = if(round_to_even(w) != w, w+1, w)
	   where hh = if(round_to_even(h) != h, h+1, h)",

	render_frame: "def(cairo_callable c, int w, int h, cairo_commands cmd, map|null m=null, map args={}) ->frame
	build_animation(
	{
		fbo: c.render(ww, hh, cmd, m),
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		frames: 1, scale: 1,
		no_remove_alpha_borders: true,
	} + args
	) where ww = if(round_to_even(w) != w, w+1, w)
	  where hh = if(round_to_even(h) != h, h+1, h)",
	
	main_menu_gui_border: "def(cairo_callable c) ->[cairo_op]
	[
		c.set_line_width(dpy(1.0)),
		c.set_source_rgba(0.22,0.25,0.29,1.0),
	]
	",
	
	get_scaled_image_uncached: "def(cairo_callable c, string image, int w, int h) ->texture_object
		c.render(w, h, [
			c.scale(decimal(w)/decimal(image_dim[0]), decimal(h)/decimal(image_dim[1])),
			c.paint_image(image),
		])
		where image_dim = c.image_dim(image)
	",

	scrollbar_background_color: "Color :: [128,128,128]",
	scrollbar_handle_color: "Color :: [255,255,255]",

	button_color_scheme: { type: "{normal: Color, depressed: Color, focus: Color, text_normal: Color, text_depressed: Color, text_focus: Color}",
	  default: {
		normal: [35,181,116],
		depressed: [168,64,30],
		focus: [168,64,30],
		text_normal: [255,255,255],
		text_depressed: [255,176,59],
		text_focus: [255,176,59],
	} },

	library_color_scheme: { type: "{normal: Color, depressed: Color, focus: Color, text_normal: Color, text_depressed: Color, text_focus: Color}",
	  default: {
		normal: [46,46,46],
		depressed: [168,64,30],
		focus: [168,64,30],
		text_normal: [196,196,196],
		text_depressed: [255,176,59],
		text_focus: [255,176,59],
	} },

	dialog_color_scheme: "
		DialogColorScheme ::
		{
			pane: [64,64,64],
			border: [128,128,128],
			text: [255,255,255],
			button: button_color_scheme,
		}
	",

	color_normalize: "def(Color color) -> [decimal,decimal,decimal,decimal]
	[decimal,decimal,decimal,decimal]<-
		res + ([1.0] * (4 - size(res)))
		where res = map([int]<- color, value/255.0)
	",

	_visited_urls: {
		type: "{string -> bool}",
		set: "if(value != _data, [
			set(_data, value),
			write_document('urls-visited.cfg', value)
		])",
		init: "{string -> bool} <- (get_document('urls-visited.cfg', ['null_on_failure', 'user_preferences_dir']) or {})",
	},

	record_visited_url: "def(string url) ->commands
		add(_visited_urls, {(url): true})
	",

	have_visited_url: "def(string url) ->bool url in _visited_urls",

	image_cache: { type: "object", init: "create_cache({name: 'image'})" },

	utf8_to_ascii: """def(string s) ->string
	regex_replace(regex_replace(c.utf8_to_markup(s), '&[lr]dquo;', '"'), '&#8217;', q('))
	where c = canvas()
	""",

	ascii_to_markup: """def(string s) ->string
		regex_replace(regex_replace(s, '"(.*?)"', '&ldquo;$1&rdquo;'), q('), '&#8217;')
	""",
}
