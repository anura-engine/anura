{
	id: "particle_controller",
	hidden_in_game: true,
	is_strict: true,

	properties: {
		_type: {
			type: "ParticleSystemInfo",
			set_type: "string|ParticleSystemInfo",
			set: "[
				set(_data, info),
				set(particles, info.info),
			] where info = if(value is string, ParticleSystemInfo<- get_document(sprintf('data/particles/%s.cfg', value)), value)
			",
		},

		emission_rate: {
			variable: false,
			type: "any",
			set: "set(particles.emission_rate, value) asserting particles != null",
			get: "particles.emission_rate asserting particles != null",
		},

		time_to_live: {
			default: -1.0,
			type: "decimal",
			set: "[set(_data, value), if(value = 0, remove_object(me))]",
		},

		_path_endpoint: { type: "[decimal,decimal]|null" },

		set_path_endpoint: "def([decimal,decimal] pos) ->commands
			map(particles.affectors,
				if(value.path,
						[
					set(value.path, map(value.path, [(value.x * cos(rotation) - value.y * sin(rotation))*scaling,
					                                 (value.y * cos(rotation) + value.x * sin(rotation))*scaling]))
					]
					
					where rotation = new_angle - cur_angle
					where new_angle = atan2(pos.y, pos.x)
					where cur_angle = atan2(endpoint.y, endpoint.x)
					where scaling = new_dist/cur_dist
					where new_dist = sqrt(pos.x*pos.x + pos.y*pos.y)
					where cur_dist = sqrt(endpoint.x*endpoint.x + endpoint.y*endpoint.y)
					where endpoint = value.path[size(value.path)-1]
				)
			)
			asserting particles
		",

		fade_away_and_die: "def(int ncycles=20) ->commands
		execute(me,
		animate(me, {
			emission_rate: 0.0,
		}, {
			duration: ncycles,
			on_complete: remove_object(me)
		})
		)
		",

		follow_obj: { type: "null|custom_obj" },

		apply_animation: "def(ParticleSystemAnimation anim, null|decimal|int target=null) ->commands
		let current_value = decimal|int<- query(me, anim.attribute);
		let target_value = if(target != null, target, anim.target);
		schedule(anim.delay or 0,
			animate(me, {
				(anim.attribute): target_value,
			}, {
				duration: anim.duration,
				easing: lib.easing.get(anim.easing),
				on_complete: if(anim.repeat, ; apply_animation(anim, current_value)),
			})
		)

		",
	},
	
	events: {
		create: "[
			if(_path_endpoint != null, set_path_endpoint([decimal(_path_endpoint.x - x), decimal(_path_endpoint.y - y)])),
			if(_type.animations, map(_type.animations, apply_animation(value)))
		]",

		process: "
		if(follow_obj != null, [
			set(x, follow_obj.mid_x),
			set(y, follow_obj.mid_y),
		])",
	},
}
