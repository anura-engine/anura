{
	id: "particle_editor",
	prototype: ["player_controlled"],
	is_human: true,
	is_strict: true,
	hitpoints: 4,
	editor_info: { category: "player" },
	mouse_drag_threshold: 10,
	always_active: true,

	types: {
		ParticleEditorInfo: "{
			last_edited: null|string,
		}",
	},

	properties: {
		editing_preferences: {
			type: "ParticleEditorInfo",
			get: "ParticleEditorInfo<- (get_document('particle-editor.cfg', [enum null_on_failure, enum user_preferences_dir]) or {})",
			set: "write_document('particle-editor.cfg', value)",
			variable: false,
		},

		particle_info: {
			type: "ParticleSystemInfo",
			default: {info: {}},
		},

		top_gui: "int :: SCREEN_HEIGHT - lib.gui.py(300)",
		load: "def(string fname) ->commands
		[
			set(particles, info.info),
			set(particle_info, info);
			_spawn_path()
		]
			where info = ParticleSystemInfo<- get_document('data/particles/' + fname + '.cfg', [ enum uncached ] )
		",

		save: "def(string fname) ->commands
			write_document(sprintf('data/particles/%s.cfg', fname), write_particles(), [ enum game_dir ])
			asserting particles != null
		",

		write_particles: "def() ->ParticleSystemInfo
		particle_info +
		{
			info: get_particles.write,
		}
		",

		has_path: "bool :: particles != null and find(particles.affectors, value.path != null) != null",
		_path_spawned: { type: "null|bool" },

		_path: { type: "[obj particle_path_point]", default: [] },
		_spawn_path: "def() ->commands
			map(_path, remove_object(value));
			set(_path, []);
			map(get_particles.affectors, if(value.path != null,
				map(value.path[1:],
					spawn('particle_path_point', {
						mid_x: int(virtual_pos.x + value[0]),
						mid_y: int(virtual_pos.y + value[1]),
						pos: index,
						zorder: zorder-100,
						controller: me,
					}, [
						add(_path, [child]),
					])
				)
			))
		",

		update_path: "def() ->commands
		[
		map(get_particles.affectors, if(value.path != null, set(value.path, path)))
		]
			where path = [[0.0,0.0,0.0]] + map(_path, [decimal(value.mid_x - virtual_pos.x), decimal(value.mid_y - virtual_pos.y), 0.0])
		",

		get_particles: "particle_system_container_proxy<- particles",

		return_to_titlescreen: { type: "null|function()->commands" },

		draggable: { type: "bool", default: true },

		show_test_animation: { type: "bool", default: false },

		_particle_controller: { type: "null|obj particle_controller" },

		virtual_pos: "[int,int] :: if(mid_y > 50000, [x, y-100000], [x,y])",
		virtual_mid: "[int,int] :: if(mid_y > 50000, [mid_x,mid_y-100000], mid_xy)",

		play_test_animation: "def() ->commands
		remove_object(_particle_controller);
		spawn('particle_controller', {
			mid_x: virtual_mid.x,
			mid_y: virtual_mid.y,
			_type: write_particles(),
		}, [
			set(_particle_controller, child),
		])",

		toggle_test_animation: "def() ->commands
		remove_object(_particle_controller);
		set(_particle_controller, null);
		set(show_test_animation, not show_test_animation);
		create_widgets();
		add(y, if(show_test_animation, 1, -1)*100000);
		game_preferences().set_preference_value('particle_editor', not show_test_animation)
		",

		create_widgets: "def() ->commands [
			map(_widgets, remove_object(value)),
			set(_widgets, []),

			spawn('combo_controller', {
				x: lib.gui.py(20),
				y: top_gui,
				_font_size: lib.gui.py(14),
				selected_index: _selected_particles,
				on_change: me.select_particles,
				_width: lib.gui.py(220),
				_height: lib.gui.py(20),
				zorder: zorder+100,
				items: _all_particles,
			}, [
				add(_widgets, [child]),
			]),

			spawn('text_entry', {
				x: lib.gui.py(20),
				y: top_gui + lib.gui.py(30),
				font_size: lib.gui.py(14),
				text: '',
				default_text: 'Enter text to save as',
				_width: lib.gui.py(220),
				_bg_color: [0.2, 0.2, 0.2, 1.0],
				_on_change: me.change_name_field,

			}, [
				add(_widgets, [child]),
				set(_name, child),
			]),

			spawn('button_controller', {
				text: 'Save',
				on_click: me.save_particles,
				_font_size: lib.gui.py(20),
				x: lib.gui.py(20),
				y: top_gui + lib.gui.py(60),
				button_width: lib.gui.py(80),
				button_height: lib.gui.py(24),
				zorder: zorder+10,
			}, [
				add(_widgets, [child]),
				set(_save_button, child),

			]),

			if(find(get_particles.affectors, value.path != null) != null,

				spawn('button_controller', {
					text: 'Add Path Node',
					on_click: me.add_path_node,
					_font_size: lib.gui.py(14),
					x: lib.gui.py(20),
					y: top_gui + lib.gui.py(140),
					button_width: lib.gui.py(120),
					button_height: lib.gui.py(24),
					zorder: zorder+10,
				}, [
					add(_widgets, [child]),
				])
			),

			if(particle_info.animations,
			[
				if(show_test_animation,

				   spawn('button_controller', {
						text: 'Play',
						on_click: me.play_test_animation,
						_font_size: lib.gui.py(14),
						x: lib.gui.py(460),
						y: top_gui - lib.gui.py(25),
						button_width: lib.gui.py(60),
						button_height: lib.gui.py(18),
				   }, [
						add(_widgets, [child]),
				   ])

				),

			   spawn('button_controller', {
					text: if(not show_test_animation, 'Test Animation', 'Back to Editing'),
					on_click: me.toggle_test_animation,
					_font_size: lib.gui.py(14),
					x: lib.gui.py(300),
					y: top_gui - lib.gui.py(25),
					button_width: lib.gui.py(120),
					button_height: lib.gui.py(18),
			   }, [
					add(_widgets, [child]),
			   ])
			]
			),

			set(_targets, []),
			set(_durations, []),
			set(_delays, []),

			map(particle_info.animations or [], [

				spawn('label', {
					x: lib.gui.py(300),
					y: top_gui + index*lib.gui.py(50) - lib.gui.py(2),
					_text: [value.attribute],
					_font_size: lib.gui.py(14),
					_color: [1,1,1,1],
					_valign: 'top',
					_halign: 'left',
				}, [
					add(_widgets, [child]),
				]),

				spawn('label', {
					x: lib.gui.py(420),
					y: top_gui + index*lib.gui.py(50) - lib.gui.py(2),
					_text: ['Target:'],
					_font_size: lib.gui.py(12),
					_color: [1,1,1,1],
					_valign: 'top',
					_halign: 'left',
				}, [
					add(_widgets, [child]),
				]),

				spawn('text_entry', {
					x: lib.gui.py(460),
					y: top_gui + index*lib.gui.py(50) - lib.gui.py(2),
					font_size: lib.gui.py(12),
					text: str(value.target),
					default_text: '',
					_width: lib.gui.py(40),
					_height: lib.gui.py(18),
					_bg_color: [0.2, 0.2, 0.2, 1.0],
					_on_change: def()->commands me.update_animation_target(index),
	
				}, [
					add(_widgets, [child]),
					add(_targets, [child]),
				]),

				spawn('label', {
					x: lib.gui.py(508),
					y: top_gui + index*lib.gui.py(50) - lib.gui.py(2),
					_text: ['Duration:'],
					_font_size: lib.gui.py(12),
					_color: [1,1,1,1],
					_valign: 'top',
					_halign: 'left',
				}, [
					add(_widgets, [child]),
				]),

				spawn('text_entry', {
					x: lib.gui.py(558),
					y: top_gui + index*lib.gui.py(50) - lib.gui.py(2),
					font_size: lib.gui.py(12),
					text: str(value.duration),
					default_text: '',
					_width: lib.gui.py(40),
					_height: lib.gui.py(18),
					_bg_color: [0.2, 0.2, 0.2, 1.0],
					_on_change: def()->commands me.update_animation_duration(index),
	
				}, [
					add(_widgets, [child]),
					add(_durations, [child]),
				]),

				spawn('label', {
					x: lib.gui.py(610),
					y: top_gui + index*lib.gui.py(50) - lib.gui.py(2),
					_text: ['Delay:'],
					_font_size: lib.gui.py(12),
					_color: [1,1,1,1],
					_valign: 'top',
					_halign: 'left',
				}, [
					add(_widgets, [child]),
				]),

				spawn('text_entry', {
					x: lib.gui.py(650),
					y: top_gui + index*lib.gui.py(50) - lib.gui.py(2),
					font_size: lib.gui.py(12),
					text: str(value.delay or 0),
					default_text: '',
					_width: lib.gui.py(40),
					_height: lib.gui.py(18),
					_bg_color: [0.2, 0.2, 0.2, 1.0],
					_on_change: def()->commands me.update_animation_delay(index),
	
				}, [
					add(_widgets, [child]),
					add(_delays, [child]),
				]),

				spawn('label', {
					x: lib.gui.py(310),
					y: top_gui + index*lib.gui.py(50) + lib.gui.py(23),
					_text: ['Easing:'],
					_font_size: lib.gui.py(12),
					_color: [1,1,1,1],
					_valign: 'top',
					_halign: 'left',
				}, [
					add(_widgets, [child]),
				]),

				spawn('combo_controller', {
					x: lib.gui.py(360),
					y: top_gui + index*lib.gui.py(50) + lib.gui.py(25),
					_font_size: lib.gui.py(12),
					selected_index: max(0, index(lib.easing.curves, value.easing)),
					on_change: def(int n) ->commands me.set_easing(index, n),
					_width: lib.gui.py(160),
					_height: lib.gui.py(16),
					zorder: zorder+100,
					items: lib.easing.curves,
				}, [
					add(_widgets, [child]),
				]),

				spawn('button_controller', {
					text: 'Repeat',
					checked: if(value.repeat, true, false),
					on_click: def()->commands me.toggle_repeat(index),
					_font_size: lib.gui.py(12),
					x: lib.gui.py(540),
					y: top_gui + index*lib.gui.py(50) + lib.gui.py(25),
					button_width: lib.gui.py(60),
					button_height: lib.gui.py(18),
					zorder: zorder+10,
				}, [
					add(_widgets, [child]),
				]),

				spawn('button_controller', {
					text: 'Delete',
					on_click: def()->commands me.delete_animation(index),
					_font_size: lib.gui.py(12),
					x: lib.gui.py(620),
					y: top_gui + index*lib.gui.py(50) + lib.gui.py(25),
					button_width: lib.gui.py(40),
					button_height: lib.gui.py(18),
					zorder: zorder+10,
				}, [
					add(_widgets, [child]),
				]),

			]),

			spawn('combo_controller', {
				x: lib.gui.py(300),
				y: top_gui + size(particle_info.animations or [])*lib.gui.py(50),
				_font_size: lib.gui.py(14),
				selected_index: 0,
				on_change: me.add_animation,
				_width: lib.gui.py(220),
				_height: lib.gui.py(20),
				zorder: zorder+100,
				items: ['Add animation...'] + animation_types,
			}, [
				add(_widgets, [child]),
			]),
		]",

		_targets: { type: "[obj text_entry]", default: [] },
		_durations: { type: "[obj text_entry]", default: [] },
		_delays: { type: "[obj text_entry]", default: [] },

		update_animation_target: "def(int nanim) ->commands
		if(regex_match(_targets[nanim].text, '[0-9]+(\\.[0-9]+)?'),
		[
			set(particle_info.animations[nanim].target, decimal(_targets[nanim].text)),
		]
		asserting particle_info.animations != null
		)
		",

		update_animation_duration: "def(int nanim) ->commands
		if(regex_match(_durations[nanim].text, '[0-9]+'),
		[
			set(particle_info.animations[nanim].duration, int(_durations[nanim].text)),
		]
		asserting particle_info.animations != null
		)
		",

		update_animation_delay: "def(int nanim) ->commands
		if(regex_match(_delays[nanim].text, '[0-9]+'),
		[
			set(particle_info.animations[nanim].delay, int(_delays[nanim].text)),
		]
		asserting particle_info.animations != null
		)
		",

		animation_types: { type: "[string]", default: ['emission_rate', 'time_to_live'] },

		set_easing: "def(int nanim, int neasing) ->commands
		[
			set(particle_info.animations[nanim].easing, lib.easing.curves[neasing]),
		]
		asserting particle_info.animations != null
		",

		toggle_repeat: "def(int nanim) ->commands
		[
			set(particle_info.animations[nanim].repeat, if(particle_info.animations[nanim].repeat, false, true)),
		]
		asserting particle_info.animations != null
		",

		add_animation: "def(int n) ->commands
		if(n > 0,
		[
			set(particle_info.animations, (particle_info.animations or []) +
			[{
				attribute: animation_types[nindex],
				target: 0.0,
				duration: 50,
				easing: 'linear'
			}]);
			create_widgets()
		]
		where nindex = n-1
		)",

		delete_animation: "def(int n) ->commands
		[
			set(particle_info.animations, particle_info.animations[:n] + particle_info.animations[n+1:]);
			create_widgets()
		]
		asserting particle_info.animations != null
		",

		_widgets: { type: "[custom_obj]", default: [] },
		_name: { type: "null|obj text_entry" },
		_save_button: { type: "null|obj button_controller" },

		change_name_field: "def() ->commands
		if(_save_button != null,
			set(_save_button.text, if(_name and _name.text, 'Save As', 'Save'));
			_save_button.render()
		)
		   
		",

		select_particles: "def(int n) ->commands [
			set(_selected_particles, n);
			set(editing_preferences, editing_preferences + {last_edited: _all_particles[n]});
			load(_all_particles[n]);
			create_widgets()
		]",

		_all_particles: "[string] ::
			map(filter(get_files_in_dir('data/particles'), regex_match(value, '[a-z0-9_-]+.cfg')), value[:size(value)-4])
		",

		_selected_particles: { type: "int", default: 0 },

		add_path_node: "def() ->commands
		execute(me,
		[
			map(get_particles.affectors, if(value.path != null, add(value.path, [[100.0, 0.0, 0.0]])));
			_spawn_path()
		])",

		save_particles: "def() ->commands
		if(name,
		[
			save(name);
			set(_selected_particles, index(_all_particles, name));
			set(editing_preferences, editing_preferences + {last_edited: _all_particles[_selected_particles]});
			create_widgets();

			spawn('label', {
				x: lib.gui.py(10),
				y: top_gui + lib.gui.py(80),
				_text: [sprintf('Saved as %s.cfg', name)],
				_font_size: lib.gui.py(18),
				_color: [1,1,1,1],
				_halign: 'left',
			}, [
				schedule(180, remove_object(child)),
			])
		],

		[

			spawn('label', {
				mid_x: SCREEN_WIDTH/2,
				mid_y: SCREEN_HEIGHT/2,
				_text: ['Invalid file name'],
				_font_size: lib.gui.py(34),
				_color: [1,0,0,1],
				_halign: 'center',
			}, [
				schedule(180, remove_object(child)),
			])

		]
		)

		where name = if(_name,
			if(_name.text = '', _all_particles[_selected_particles],
			   regex_match(_name.text, '[a-z0-9_-]+'), _name.text)
		)
		
		",
	},

	events: {
		create: "
		if(last_edited >= 0,
			set(_selected_particles, last_edited)
		) where last_edited = index(_all_particles, editing_preferences.last_edited);
		[
			game_preferences().set_preference_value('particle_editor', true),
			set(level.dimensions, [0,0,SCREEN_WIDTH,SCREEN_HEIGHT]),
			if(return_to_titlescreen != null,
			spawn('button_controller', {
				text: 'Back',
				on_click: return_to_titlescreen,
				trap_escape: true,
				_font_size: lib.gui.py(22),
				x2: level.dimensions[2] - lib.gui.py(10),
				y2: level.dimensions[3] - lib.gui.py(10),
				button_width: lib.gui.py(60),
				button_height: lib.gui.py(24),
				zorder: zorder-1,
			})
			),

			load(_all_particles[_selected_particles]);
			create_widgets()
		]",

		process: "[
			if(_path_spawned != null and _path_spawned != has_path,
			[
				map(get_particles.affectors, if(value.path != null and size(value.path) < 3, set(value.path, [[0.0,0.0,0.0], [200.0,0.0,0.0], [200.0,200.0,0.0]])));
				_spawn_path();
				create_widgets()
			]),
			set(_path_spawned, has_path),
		]",

		drag: "if(draggable,
			let start_mid_xy = mid_xy;
			set(mid_xy, lib.gui.mouse_pos(level));
			(
			map(_path, [
				add(value.mid_x, dx),
				add(value.mid_y, dy),
			])
			where dx = mid_xy.x - start_mid_xy.x
			where dy = mid_xy.y - start_mid_xy.y
			)
		)",
	},
}
