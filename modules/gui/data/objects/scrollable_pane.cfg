// A scrollable pane is an object that is given:
// - elements: a list of objects, and desired vertical positions (ypos)
//             to display those objects.
// - area_width/area_height: a rectangular area in which these objects may
//             be displayed. Combining this with the scrollable_pane's
//             x/y gives the area on screen the pane occupies
//
// The elements will be added to the level but have their position managed
// by the scrollable_pane. The ypos given in elements gives the element's
// offset from the top of the pane. If there are elements that would be
// placed below the bottom of the pane, a scrollbar is added and used to
// adjust the element's positions.
//
// Elements are clipped to the scrollable_pane boundaries.
//
// 
// The element at ypos = 0 is displayed at the top of the scrollable pane.
// 
// Elements also have their x position set. But this is done using a much
// simpler method. If left_align is true, x will be the left side of the pane,
// if left_align is false, x2 will be the right side of the pane, or the
// left side of the scrollbar if one is present.
{
	id: "scrollable_pane",
	is_strict: true,
	hidden_in_game: true,
	zorder: 500,
	always_active: true,
	use_absolute_screen_coordinates: true,

	types: {
		Child: "{ obj: custom_obj, xpos: int|null, ypos: int, height: int|null }",
		PendingChild: "{ create: function()->custom_obj, xpos: int|null, ypos: int, height: int, info: any|null }",
	},

	properties: {
		area_width: { type: "int" },
		area_height: { type: "int" },

		hide_scrollbar_on_mouse_off: { default: false },
		_scrollbar_shown: { type: "bool", default: true, set: "if(_data != value, [
			set(_data, value),
			if(_scrollbar != null, set(_scrollbar.shown, value)),

		])" },

		_scrollbar_stop_showing_at: { type: "int|null" },

		always_keep_children_in_level: { default: false },
		left_align: { type: "bool", default: true },

		elements: { type: "[Child]" },
		pending_elements: { type: "[PendingChild]", default: [] },

		current_position: "int :: if(_scrollbar != null, int(_scrollbar.handle_pos), 0)",
		_force_to_bottom: { type: "bool", default: false },
		force_to_bottom: "def() ->commands set(_force_to_bottom, true)",

		//clamps items to bottom instead of top if there is no scrollbar.
		clamp_to_bottom: { type: "bool", default: false },

		focus_on_mouseover: { type: "bool", default: false },

		focus_override: {
			type: "bool",
			default: false,
			set: "if(value != _data, [
				set(_data, value),
				if(_scrollbar != null, set(_scrollbar.has_focus, value)),
			])",
		},

		move_position: "def(int delta) ->commands
			if(_scrollbar != null and _bottom > 0, [
				add(_scrollbar.handle_pos, delta);
				recalculate()
			])
		",

		step_size: { type: "int", default: 32 },

		_scrollbar: { type: "null|obj scrollbar_vertical", set: "if(_data != value, [remove_object(_data), set(_data, value)])" },

		_bottom: { type: "int", default: 0 },

		recalculate: "def() ->commands execute(me, [
			set(_bottom, bottom),
			if(bottom < area_height,
			   set(_scrollbar, null),
			   spawn('scrollbar_vertical', {
				x: x + area_width - 2,
				y: y,
				zorder: zorder+1,
				shown: _scrollbar_shown,
				scrollbar_width: lib.gui.py(8),
				scrollbar_height: area_height,
				has_focus: focus_override,
				step_size: step_size,
				handle_height: decimal(area_height),
				max_pos: decimal(bottom),
				handle_pos: if(_force_to_bottom, decimal(bottom - area_height), current_position),
				handle_color: lib.gui.scrollbar_handle_color,
				scrollbar_color: lib.gui.scrollbar_background_color,

				handle_scroll: def(decimal yscroll)->commands [
					me.recalculate_elements(),
				],
			   }, [
			   	set(_scrollbar, child),
			   ]),
			);

			set(_force_to_bottom, false);

			recalculate_elements(),
		]
			where bottom = int<- max(map(elements, value.ypos + max(value.obj.img_h, value.height or 0)) + map(pending_elements, value.ypos + value.height)) or 0
		)
		",

		preload_pending_child: "def(int n=1) ->commands execute(me,
		if(pending_elements, [
			set(pending_elements, pending_elements[n:]),
			add(elements, map(pending_elements[:n], {xpos: value.xpos, ypos: value.ypos, obj: value.create()}))
		]))",

		add_pending_children: "def() ->commands execute(me,
		[
			set(pending_elements, filter(pending_elements, value not in items)),
			add(elements, map(items, {xpos: value.xpos, ypos: value.ypos, obj: value.create()}))
		]
		) where items = filter(pending_elements,
			value.ypos < current_position + area_height and
			value.ypos + value.height > current_position
		)",

		recalculate_elements: "def() ->commands execute(me, [
			add_pending_children();
			map(elements,
			  if(in_window, [
			       if(value.obj not in level.chars, add_object(value.obj)),
				   if(left_align,
					  set(value.obj.x, x + if(value.xpos != null, value.xpos, 0)),
					  set(value.obj.x2, if(_scrollbar = null, x + area_width, _scrollbar.x) + if(value.xpos != null, value.xpos, 0)),
				   ),

				   set(value.obj.y, obj_y),

				   set(value.obj.zorder, zorder-1),

				   if(obj_y < y or obj_y + value.obj.img_h >= y + area_height, [
				   	set(value.obj.clip_area_absolute, true),
				   	set(value.obj.clip_area, [x, y, area_width, area_height]),
				   ], [
				   	set(value.obj.clip_area, null),
				   ])

				 ] where obj_y = y + clamp_adjust + value.ypos - current_position,
			     remove_object(value.obj)
				)
				where in_window = always_keep_children_in_level or
				                  (value.ypos < current_position + area_height and
				                   value.ypos + value.obj.img_h > current_position)
			)
		])
			where clamp_adjust = if(clamp_to_bottom, max(0, area_height - bottom), 0)
			where bottom = int<- max(map(elements, value.ypos + value.obj.img_h) + map(pending_elements, value.ypos + value.height)) or 0
		",

		animate_element_movement_from_previous_position: "def([Child] old_elements, int duration, int|null old_position=null) ->commands [
			map(elements, if(old_el != null and (value.obj in level.chars),
				set(value.obj.y, y + old_el.ypos - base_pos);
				animate(value.obj, {
					y: y + value.ypos - current_position
				}, {
					duration: duration,
				})
			) where old_el = find(old_elements, value.obj = context.value.obj))
		] where base_pos = if(old_position = null, current_position, old_position)",
	},

	on_create: "recalculate()",

	on_being_removed: "remove_object(_scrollbar); map(elements, remove_object(value.obj))",

	timer_frequency: 10,
	on_timer: "[
	if(hide_scrollbar_on_mouse_off,
	[
	if(should_show != _scrollbar_shown, [
		if(should_show = false and _scrollbar_stop_showing_at = null, set(_scrollbar_stop_showing_at, cycle+120)),
		   
		if(should_show or (_scrollbar_stop_showing_at is int) and cycle >= _scrollbar_stop_showing_at,
		[
		   set(_scrollbar_shown, should_show),
		   set(_scrollbar_stop_showing_at, null),
		]),
	]),
	if(should_show, set(_scrollbar_stop_showing_at, null))
	]
		
	where should_show = mouse_x > x and mouse_y > y and mouse_x < x + area_width+30 and mouse_y < y + area_height+10
	where mouse_x = lib.gui.mouse_pos(level)[0]
	where mouse_y = lib.gui.mouse_pos(level)[1]
	),

	if(focus_on_mouseover,
	set(focus_override, should_show)
	where should_show = mouse_x > x and mouse_y > y and mouse_x < x + area_width+30 and mouse_y < y + area_height+10
	where mouse_x = lib.gui.mouse_pos(level)[0]
	where mouse_y = lib.gui.mouse_pos(level)[1]
	)
	
	]",
}
