{
	id: "combo_label_controller",
	is_strict: true,
	hidden_in_game: true,

	properties: {
		xpos: { type: "int" },
		ypos: { type: "int" },
		halign: { type: "string", default: "center" },

		move: "def(int new_x, int new_y) ->commands if([new_x,new_y] != [xpos,ypos],
		[
			set(xpos, new_x),
			set(ypos, new_y),
		]; position_items()
		)
		",

		items: { type: "[string]" },

		spacing: "int :: lib.gui.py(10)",

		_font_size: { type: "int" },

		click_handler: { type: "function(int)->commands" },

		_labels: { type: "[obj combo_label]", default: [] },

		grouping: { type: "string", default: "combo" },

		_handle_click: "def(obj combo_label lb) ->commands
		[
			if(_selectable, set(selected_index, lb.index)),
			click_handler(lb.index),
		]
		",

		_selectable: "bool :: selected_index >= 0",

		selected_index: {
			type: "int",
			set: "[
				set(_data, value),
				map(_labels, set(value.selected, context.value = value.index)),
			]",
			default: 0,
		},

		position_items: "def() ->commands
		(
		let xx = if(halign = 'left', xpos, halign = 'right', xpos + ww, xpos - ww/2);
		map(_labels, ; set(value.y2, ypos); set(value.x, xx); add(xx, value.img_w + spacing); fire_event(value, 'create'));

		set(draw_primitives,
			map(_labels[:size(_labels)-1],
			{
				type: 'rect',
				area: [(value.x2 + next.x)/2-1, ytop, (value.x2 + next.x)/2, ybot],
				color: [1, 1, 1, 1],
			} where next = _labels[index+1])
		)
		where ytop = min(map(_labels, value.y)) or 0
		where ybot = max(map(_labels, value.y2)) or 0
		)
		where ww = sum(map(_labels, value.img_w)) + (size(_labels)-1)*spacing
		",
	},

	on_being_added: "map(_labels, add_object(value))",
	on_being_removed: "map(_labels, remove_object(value))",

	on_create: "
		map(items,
			spawn('combo_label', {
				y2: ypos,
				_font_size: _font_size,
				_text: value,
				left_rect: null, //lib.gui.py(-6),
				right_rect: null, //if(index+1 = size(items), -lib.gui.py(6)),
				index: index,
				grouping: grouping,
				zorder: zorder,
				click_handler: me._handle_click,
			}, [
				add(_labels, [child])
			])
		);

		set(selected_index, selected_index);

		position_items()
	",
}
