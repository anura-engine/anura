{
	id: "slider_widget",
	is_strict: true,

	properties: {
		slider_width: { type: "int" },
		slider_height: { type: "int" },
		
		_handle: { type: "null|obj slider_widget.handle" },

		value_change_handler: { type: "null|function(decimal)->commands" },

		slider_value: { type: "decimal", default: 1.0 },

		render: "def() ->commands [
			set(animation, lib.gui.render_frame(c, slider_width, slider_height,
			[
				c.rectangle(0, slider_height/2, slider_width, lib.gui.py(1000)/1000.0),

				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
			]
			)
			) where c = canvas()
		]",
	},

	on_create: "
		render();
	[
		spawn('slider_widget.handle', {
			mid_x: x + int(slider_value*slider_width),
			mid_y: mid_y,
			parent_slider: me,
			zorder: me.zorder+1,
		}, [
			set(me._handle, child),
		]),
	]",

	on_type_updated: "render()",

	on_being_removed: "remove_object(_handle)",
	on_being_added: "if(_handle != null, add_object(_handle))",

	on_process: "if(_handle != null, [
		set(_handle.mid_x, x + int(slider_value*slider_width)),
		set(_handle.mid_y, mid_y),
	])",

	object_type: [{
		id: "handle",
		is_strict: true,

		mouse_drag_threshold: 0,

		properties: {
			_drag_anchor: { type: "null|int" },
			_drag_anchor_value: { type: "null|decimal" },
			parent_slider: { type: "obj slider_widget" },
			diameter: "int :: parent_slider.slider_height",
			render: "def() ->commands [
				set(animation, lib.gui.render_frame(c, diameter, diameter,
				[
					c.arc(0.5*diameter, 0.5*diameter, 0.45*diameter, 0, 2*3.15),
					c.set_source_rgba(1, 1, 1, 1),
					c.fill(),
				], null, {force_no_alpha: true}
				)
				) where c = canvas()
			]",
		},

		on_create: "[render(), set(alpha, 196)]",
		on_type_updated: "render()",

		on_mouse_enter: "[
			set(alpha, 255)
		]",

		on_mouse_leave: "[
			set(alpha, 196)
		]",

		on_drag_start: "[
			set(_drag_anchor, mouse_x),
			set(_drag_anchor_value, parent_slider.slider_value),
		] where mouse_x = int<- arg.mouse_x",
		on_drag_end: "[set(_drag_anchor, null), set(_drag_anchor_value, null)]",
		on_drag: "if(_drag_anchor is int and _drag_anchor_value is decimal, [
			set(parent_slider.slider_value, new_value),
			if(parent_slider.value_change_handler != null,
			   parent_slider.value_change_handler(new_value)),
			set(mid_x, parent_slider.x + new_value*parent_slider.slider_width),
			
		] where new_value = clamp(_drag_anchor_value + dx, 0.0, 1.0)
		  where dx = decimal(mouse_x - _drag_anchor)/parent_slider.slider_width
		  where mouse_x = int<- arg.mouse_x
		)",
	}],
}
