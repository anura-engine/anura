{
	id: "game_icon",
	is_strict: true,
	always_active: true,

	properties: {
		size: { default: 512.0, set: "[invalidate(), set(_data, value)]" },
		texture_size: "int :: int(scaling*512.0)",
		scaling: { type: "decimal", get: "sz/512.0 where sz = decimal(find_or_die([2,4,8,16,32,64,128,256,512,1024,2048,4096,8192], value >= size))", set: "[invalidate(), set(size, 512*value)]", variable: false },
		rotation: { type: "decimal", set: "[invalidate(), set(_data, value)]", default: 0.0 },

		tooltip_text: { type: "null|string" },
		_tooltip: { type: "null|obj tooltip" },

		icon: { type: "string", set: "[
			if(_data != value, invalidate()),
			set(_data, value),
		]" },

		draw_color: { type: "[decimal,decimal,decimal,decimal]|[decimal,decimal,decimal]", default: [1.0,1.0,1.0,1.0] },

		additional_icons: { type: "[string]", default: [] },
		additional_colors: { type: "[[decimal,decimal,decimal,decimal]|[decimal,decimal,decimal]]", default: [] },

		draw_circle: {
			type: "bool",
			default: false,
			set: "if(_data != value, [invalidate(), set(_data, value)])",
		},

		circle_radius: { default: 0.48 },

		invalidate: "def() ->commands set(me._dirty, true)",

		_dirty: false,

		user_info: { type: "any" },

		force_no_alpha: { type: "bool", default: false },

		_update_canvas: "def() ->commands

		if (sc > 0,
		[
		set(animation, {
			id: 'svg',
			image: 'svg',
			fbo: _render_internal(),
			x: 0,
			y: 0,
			w: texture_size,
			h: texture_size,
			scale: decimal(size)/decimal(texture_size),
			frames: 1,
			force_no_alpha: force_no_alpha,
			duration: -1,
		}),
		set(me._dirty, false)
		]) where sc = scaling",

		render_to_file: "def(string fname='icon.png') ->commands
		  _render_internal().save(fname)",

		_render_internal: "def() ->texture_object
		query_cache(global_cache(16), [sc, draw_circle, icon, rotation, additional_icons, draw_color, additional_colors],
		c.render(texture_size, texture_size,
			[
				c.save(),
			] +
			
			if(rotation = 0, [], [ c.translate(sc*512/2.0, sc*512/2.0), c.rotate(rotation), c.translate(-sc*512/2.0, -sc*512/2.0)]) +

			if(draw_circle, [
				c.translate(128*sc, 128*sc),
				c.scale(sc/2, sc/2)
			], [
				c.scale(sc,sc),
			]) +

			[
				c.set_source_color(draw_color),
				map(additional_icons, [
					c.save(),
					if(index < size(additional_colors), c.set_source_color(additional_colors[index])),
					c.draw_svg('images/icons/' + value, 512, 512),
					c.restore(),
				]),
				c.draw_svg('images/icons/' + icon, 512, 512),
				c.restore(),
			] + if(draw_circle, [
				c.arc(sc*512/2, sc*512/2, sc*512*circle_radius, 0, 2*3.15),
				c.set_line_width(1.5),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),
			],
			[])) where c = canvas()
			asserting sc < 20 | [sc, icon]
		)
		where sc = scaling
		",

		click_handler: { type: "null|function(obj game_icon)->commands" },
		mouse_enter_handler: { type: "null|function(obj game_icon)->commands" },
		mouse_leave_handler: { type: "null|function(obj game_icon)->commands" },

		aa: { type: "decimal", default: 0.2 },
	},

	events: {
		click: "if(click_handler, click_handler(me))",
		mouse_enter: "[
			if(mouse_enter_handler, mouse_enter_handler(me)),
			if(tooltip_text,
				spawn('tooltip', {
					text: tooltip_text,
					mid_x: mid_x,
					y2: y,
				}, [
					set(me._tooltip, child),
				]),
			),
		]",
		mouse_leave: "[
			if(mouse_leave_handler, mouse_leave_handler(me)),
			remove_object(_tooltip),
			set(_tooltip, null),
		]",

		being_removed: "[
			remove_object(_tooltip),
			set(_tooltip, null),
		]",
	
		process: "if(_dirty, _update_canvas())",
	},

	shader: {
		fragment: """
			uniform sampler2D u_anura_tex_map;
			uniform float u_property_img_w;
			uniform float u_property_img_h;
			uniform float u_property_aa;
			uniform float u_property_alpha;
			uniform float u_property_brightness;
			varying vec2 v_texcoord;
			void main()
			{
				if(u_property_aa <= 0.0) {
					gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
				} else {
					vec4 col = vec4(0,0,0,0);
					for(float x = -u_property_aa; x <= u_property_aa; x += u_property_aa) {
						for(float y = -u_property_aa; y <= u_property_aa; y += u_property_aa) {
							col += texture2D(u_anura_tex_map, v_texcoord + vec2(x/u_property_img_w,y/u_property_img_h));
						}
					}

					gl_FragColor = col/9.0;
					gl_FragColor[0] *= u_property_brightness/255.0;
					gl_FragColor[1] *= u_property_brightness/255.0;
					gl_FragColor[2] *= u_property_brightness/255.0;
					gl_FragColor[3] *= u_property_alpha/255.0;
				}
			}
		"""
	},
}
