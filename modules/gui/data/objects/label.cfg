{
id: "label",
is_strict: true,
auto_anchor: true,

properties: {

	_text: { type: "[string]" },

	_halign: { type: "string", default: "center" },
	_valign: { type: "string", default: "center" },

	tag: { type: "any" },

	get_text: "def() ->[string] _text",

	set_text: "def([string] t) ->commands execute(me, [
		set(_text, t),
		fire_event('create'),
	])",

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: { type: "int", init: "lib.gui.py(32)" },

	_render_key: "[_font, _font_size, _text]",

	_outline_width: { default: 0.0 },

	_color: { type: "[decimal,decimal,decimal,decimal]", default: [1,1,1,1] },
	_bg_color: { type: "null|[decimal,decimal,decimal,decimal]" },

	_blend: { type: "null|[string,string]", default: null },

	_force_width: { type: "int|null" },
	_force_height: { type: "int|null" },

	_pad_above: { default: 0 },
	_pad_below: { default: 0 },
	_pad_left: { default: 0 },
	_pad_right: { default: 0 },

	text_area: "{
		width: decimal<- max(map(areas, value.width) + [1]),
		line_height: font_extents.height,
		y_bearing: y_bearing,
		height: size(_text)*line_height + line_height/2,
	}
	where y_bearing = decimal<- max(map(areas, value.y_bearing))
	where line_height = decimal<- font_extents.height
	where areas = map(_text, c.text_extents(_font, _font_size, value))
	where font_extents = c.font_extents(_font, _font_size)
	where c = canvas()",

	mouse_enter: { type: "null|function()->commands" },
	mouse_leave: { type: "null|function()->commands" },
},

on_mouse_enter: "[if(mouse_enter != null, mouse_enter())]",
on_mouse_leave: "if(mouse_leave != null, mouse_leave())",

on_create: "[
 set(animation, {
	id: 'fbo',
	image: 'fbo',
	x: 0, y: 0, w: canvas_width, h: canvas_height,
	scale: 1, frames: 1,
	blend: _blend,
	fbo: query_cache(global_cache(8), _render_key, c.render(canvas_width, canvas_height,
	if(_bg_color != null,
	[
		c.rectangle(0, 0, canvas_width, canvas_height),
		c.set_source_rgba(_bg_color[0], _bg_color[1], _bg_color[2], _bg_color[3]),
		c.fill(),
	], []) +

	[
		c.translate(0, _pad_above),
	] +

	fold(map(_text, [
		c.translate(0, area.line_height),

		c.save(),

		c.translate(_pad_left, 0),
		if(_force_width != null, c.translate(-(area.width-_force_width)/2, 0)),
		if(_force_height != null, c.translate(0, -(area.height-_force_height)/2)),

		c.set_font(_font),
		c.set_font_size(_font_size),
		c.text_path(value),

		c.set_source_rgba(_color[0], _color[1], _color[2], _color[3]),
		c.fill(),

		if(_outline_width > 0, [
			c.text_path(value),
			c.set_source_rgba(0, 0, 0, 1),
			c.set_line_width(_outline_width),
			c.stroke(),
		]),

		c.restore(),
	]), a+b)))
}
	  where canvas_width = if(_force_width != null, _force_width, round_to_even(area.width + _pad_left + _pad_right))
	  where canvas_height = if(_force_height != null, _force_height, round_to_even(area.height + _pad_above + _pad_below))
	  where area = text_area
	  where c = canvas()
	
	),

	switch(_halign,
	  'none', null,
	  'center', set(mid_x, mid_x),
	  'left', set(x, x),
	  set(x2, x2)
	),


	switch(_valign,
	  'none', null,
	  'center', set(mid_y, mid_y),
	  'top', set(y, y),
	  set(y2, y2)
	),
]
",

}
