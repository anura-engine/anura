{
	id: "context_menu",
	is_strict: true,
	auto_anchor: true,

	always_active: true,

	zorder: 100000,

	types: {
		ContextMenuItem: "{
			text: string,
			on_select: function()->commands,
		}",
	},

	properties: {
		_exclude_from_pause: { type: "[custom_obj]", default: [] },
		_paused: { type: "[custom_obj]", default: [] },

		on_select_none: { type: "null|function()->commands" },

		pause_background_objects: "
			[[set(c.paused, true), add(_paused, [c])] | c <- level.chars, c != me, c not in _exclude_from_pause]
		",

		items: { type: "[ContextMenuItem]", default: [] },

		_selected_item: { type: "int|null", set: "if(value != _data, [set(_data, value); render(_width, _height)])" },

		_font_size: { type: "int", init: "lib.gui.py(22)" },

		color_scheme: { type: "{string -> Color}", init: "lib.gui.button_color_scheme" },

		_line_height: "int :: int(info.height) where info = canvas().font_extents(lib.font.regular_font, _font_size)",

		_width: "int<- round_to_even(_border*2 + int(max(map(items, c.text_extents(lib.font.regular_font, _font_size, value.text).width)))) where c = canvas()",
		_height: "int :: round_to_even(_border*2 + _line_height * size(items))",

		_border: { type: "int", init: "lib.gui.py(8)" },

		_screen_boundary: { type: "null|[int,int,int,int]" },

		render: "def(int ww, int hh) ->commands [
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [
				c.set_font(lib.font.regular_font),
				c.set_font_size(_font_size),

				c.rectangle(0, 0, ww, hh),
				c.set_source_color(map([int,int,int]<- color_scheme['normal'], value/255.0)),
				c.fill(),

				if(_selected_item != null, [
					c.rectangle(0, _border + _selected_item*_line_height, ww, _line_height),
					c.set_source_color(map([int,int,int]<- color_scheme['focus'], value/255.0)),
					c.fill(),
				]),

				c.save(),
				c.translate(_border, _border + c.font_extents(lib.font.regular_font, _font_size).ascent),




				map(items,
				[
					c.set_source_color(map([int,int,int]<- color_scheme[if(index = _selected_item, 'text_focus', 'text_normal')], value/255.0)),
					c.text_path(value.text),
					c.fill(),
					c.translate(0, line_height),

				]) where line_height = _line_height,

				c.restore(),
			]
			)
			  where c = canvas(),
		})
		]",

		_leave_on_mouse_up: { type: "bool", default: false },

		mouse_x: "int<- level.player.ctrl_mice[0][0]",
		mouse_y: "int<- level.player.ctrl_mice[0][1]",
	},

	on_create: "render(_width, _height);
	if(_screen_boundary, [
		if(x < _screen_boundary[0], set(x, _screen_boundary[0])),
		if(y < _screen_boundary[1], set(y, _screen_boundary[1])),
		if(x2 > _screen_boundary[2], set(x2, _screen_boundary[2])),
		if(y2 > _screen_boundary[3], set(y2, _screen_boundary[3])),
	])",
	on_click: "[
	swallow_mouse_event(),
	schedule(2, [
		if(_selected_item != null and _selected_item < size(items),
		   items[_selected_item].on_select(),
		   on_select_none != null, on_select_none()),
		remove_object(me),
	])
	]",

	"on_mouse_down*": "if(_selected_item = null,
		set(_leave_on_mouse_up, true)
	)",

	"on_mouse_up*": "if(_leave_on_mouse_up, [
		swallow_mouse_event(),
		remove_object(me)
	])",

	on_mouse_move: "[
		set(_selected_item, if(mouse_pos.x > x and mouse_pos.x < x2 and mouse_pos.y > y+_border and mouse_pos.y < y2-_border,
		    (mouse_pos.y - (y+_border))/_line_height))
	] where mouse_pos = lib.gui.mouse_pos(level)",

	on_mouse_leave: "[
		set(_selected_item, null),
	]",

	on_being_removed: "[
	map(_paused, set(value.paused, false))
	]",
}
