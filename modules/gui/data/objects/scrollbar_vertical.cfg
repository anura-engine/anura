{
	id: "scrollbar_vertical",
	is_strict: true,

	properties: {
		scrollbar_width: { type: "int" },
		scrollbar_height: { type: "int" },
		scrollbar_color: { type: "Color", default: [128,128,128] },
		
		handle_color: { type: "Color", default: [255,255,255] },
		handle_height: { type: "decimal" },

		max_pos: { type: "decimal" },
		max_handle_pos: "decimal :: max_pos - handle_height",

		handle_pos: {
			type: "decimal",
			set: "if(actual_value != _data, [
				set(_data, actual_value),
				if(handle, set(handle.y, y + int(actual_value*(scrollbar_height/max_pos))))
			]; if(handle_scroll != null, handle_scroll(value))
			) where actual_value = clamp(value, 0.0, max_handle_pos)"
		},
		step_size: { type: "decimal" },

		handle_scroll: { type: "null|function(decimal)->commands" },

		handle: { type: "null|obj scrollbar_vertical.handle" },
		get_handle: "obj scrollbar_vertical.handle<- handle",

		render: "def() ->commands
		set(animation, lib.gui.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_color(lib.gui.color_normalize(scrollbar_color)),
			c.fill(),
		]))
		where ww = scrollbar_width
		where hh = scrollbar_height
		where c = canvas()
		",

		has_focus: { type: "bool", default: false },

		shown: { type: "bool", default: true, set: "
			if(_data != value, [
				set(_data, value),

				if(cycle > 0, [
					animate(me, {
						alpha: if(value, 255, 0),
					}, {
						name: 'scroll_fade',
						duration: if(value, 10, 30),
						replace_existing: true,
					}),
					if(handle != null, animate(handle, {
						alpha: if(value, 128, 0),
					}, {
						name: 'scroll_fade',
						duration: if(value, 10, 30),
						replace_existing: true,
					})),
				]),
			])"
		},
	},

	events: {
		mouse_wheel: "if(has_focus, add(handle_pos, -step_size*arg.yscroll))",
		create: "render();
		spawn('scrollbar_vertical.handle', {
			x: x,
			y: y + int(handle_pos*scrollbar_height/max_pos),
			handle_width: scrollbar_width,
			handle_height: int((handle_height*scrollbar_height)/max_pos),
			handle_color: handle_color,
			zorder: zorder+1,
			scrollbar: me,
		}, [
			set(me.handle, child),
		]
		);

		if(not shown, [set(alpha, 0); set(get_handle.alpha, 0)],
		              [set(alpha, 128); set(get_handle.alpha, 128)])",

		click: "swallow_mouse_event();
		if(mouse_y < get_handle.y,
		   add(handle_pos, -handle_height),
		   mouse_y > get_handle.y2,
		   add(handle_pos, handle_height)
		)
			where mouse_y = lib.gui.mouse_pos(level)[1]
		",

		being_removed: "remove_object(handle)",
	},

	object_type: [{
		id: "handle",
		mouse_drag_threshold: 2,
		properties: {
			scrollbar: { type: "obj scrollbar_vertical" },
			handle_width: { type: "int" },
			handle_height: { type: "int" },

			render: "def() ->commands
			set(animation, lib.gui.render_frame(c, ww, hh,
			[
				c.rectangle(0,0,ww,hh),
				c.set_source_color(lib.gui.color_normalize(handle_color)),
				c.fill(),
			]))
			where ww = handle_width
			where hh = handle_height
			where c = canvas()
			",

			handle_color: { type: "Color" },

			_drag_pos: { type: "null|int" },
			_start_drag: { type: "null|decimal" },
		},

		events: {
			create: "render(); set(alpha, 128)",
			mouse_enter: "animate(me, { alpha: 255 }, { duration: 10 })",
			mouse_leave: "animate(me, { alpha: 128 }, { duration: 10 })",

			drag_start: "[
				swallow_mouse_event(),
				set(_drag_pos, mouse_y),
				set(_start_drag, scrollbar.handle_pos),
			]
				where mouse_y = lib.gui.mouse_pos(level)[1]",

			drag: "if(_drag_pos != null and _start_drag != null, [
				swallow_mouse_event(),
				set(scrollbar.handle_pos, _start_drag + (mouse_y - _drag_pos)*(scrollbar.max_pos/scrollbar.scrollbar_height)),
			])
				where mouse_y = lib.gui.mouse_pos(level)[1]",
			
			click: "swallow_mouse_event()",
		},
	}]
}
