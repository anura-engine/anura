{
	id: "button_controller",
	is_strict: true,
	zorder: 500,
	use_absolute_screen_coordinates: true,
	auto_anchor: true,

	prototype: ["focus_widget"],

	properties: {

		//if true, pressing escape will trigger this button
		trap_escape: { type: "bool", default: false },

		on_focus: "def() ->commands ; render()",
		on_lose_focus: "def() ->commands ; render()",
		on_enter: "def() ->commands do_click()",

		do_click: "def()->commands

		if(not paused, [
			if(sound_mouseclick, lib.sound.play_sound(me, sound_mouseclick)),
			if(checked != null,
				(set(checked, not checked); render(); on_click()),
				on_click()
			),
			swallow_mouse_event(),
		])",

		mouseover: { type: "bool", default: false },

		_check_mouseover: "def() ->commands [
			if(mouse_in != mouseover,
				set(mouseover, mouse_in); render()
			)
			where mouse_in = mouse_x is int and mouse_y is int and mouse_x > x and mouse_y > y and mouse_x < x2 and mouse_y < y2
			where mouse_x = lib.gui.mouse_pos(level)[0]
	  		where mouse_y = lib.gui.mouse_pos(level)[1]
		]",

		tooltip: { type: "string|null" },
		tooltip_color: { type: "[decimal,decimal,decimal]", default: [1,1,1] },
		_tooltip_delay: { default: 40 },

		_tooltip_pos: { type: "[int,int]|null" },
		_tooltip_last_mouse_move: { type: "int", default: 0 },

		_displayed_tooltip: { type: "null|obj tooltip" },
		_show_tooltip: "def() ->commands
		if(tooltip != null,
		[
			remove_object(_displayed_tooltip),
			spawn('tooltip', {
				text: tooltip,
				x: int<- level.player.ctrl_mice[0][0],
				mid_y: int<- level.player.ctrl_mice[0][1],
				zorder: zorder+10,
			}, [
				set(_displayed_tooltip, child)
			])
		])
		",

		text: { type: "string" },
		on_click: { type: "function() ->commands" },
		button_width: { type: "int", init: "lib.gui.py(160)" },
		button_height: { type: "int", init: "lib.gui.py(35)" },
		_font_size: { type: "int", init: "lib.gui.px(20)" },

		sound_mouseover: { type: "null|string", default: "interface/button-mouseover" },
		sound_mouseoff: { type: "null|string", default: "interface/button-mouseoff" },
		sound_mouseclick: { type: "null|string", default: "interface/button-mouseclick" },

		color_scheme: { type: "{string -> Color}", init: "lib.gui.button_color_scheme" },
		user_info: { type: "null|any" },

		checked: { type: "null|bool" },

		render: "def() ->commands [
		set(animation, lib.gui.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_color(map([int,int,int]<- color_scheme[if(mouseover, 'focus', 'normal')], value/255.0)),
			c.fill(),

			if(has_focus, [
				c.rectangle(0,0,ww,hh),
				c.set_line_width(lib.gui.dpy(2.0)),
				c.set_source_color(map([int,int,int]<- color_scheme[if(mouseover, 'text_focus', 'text_normal')], value/255.0)),
				c.stroke(),
			]),

			if(checked != null, [
				c.rectangle(hh/4,hh/4,hh/2,hh/2),
				c.set_source_rgba(0,0,0,1),
				c.fill(),

				if(checked, [
					c.set_source_rgba(1,1,1,1),
					c.set_line_width(hh*0.05),
					c.move_to(hh*0.3, hh*0.53),
					c.line_to(hh*0.4, hh*0.63),
					c.line_to(hh*0.7, hh*0.33),
					c.stroke(),
				]),

				c.translate(hh/2, 0),
			]),

			[
				c.set_source_color(map([int,int,int]<- color_scheme[if(mouseover, 'text_focus', 'text_normal')], value/255.0)),
				
				c.translate((button_width-text_width)/2, (button_height - text_height)/2),
				map(fragments, [
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]),
			]
			where text_height = decimal<- (max(map(fragments, value.height)) or button_height)
			where text_width = sum(map(fragments, value.x_advance))
			where fragments = c.markup_text(q(<font size=') + str(_font_size) + q('>) + c.escape_text(text) + q(</font>), { width: button_width })
		])  where c = canvas()
			where ww = round_to_even(button_width)
			where hh = round_to_even(button_height)
		)
		]",
	},
	
	on_settings_menu: "if(trap_escape, [
		set(level.show_builtin_settings_dialog, false),
		do_click(),
	])",

	on_mouse_enter: "if(sound_mouseover, lib.sound.play_sound(me, sound_mouseover)); set(mouseover, true); if(not paused, render())",
	on_mouse_leave: "if(sound_mouseoff, lib.sound.play_sound(me, sound_mouseoff)); set(mouseover, false); if(not paused, render())
	
	; if(tooltip != null, [
		remove_object(_displayed_tooltip),
		set(_displayed_tooltip, null),
	])",

	on_mouse_move: "
	if(tooltip != null,
	[
		set(_tooltip_last_mouse_move, cycle),
		remove_object(_displayed_tooltip),
		set(_displayed_tooltip, null),
		set(_tooltip_pos, lib.gui.mouse_pos(level)),
		schedule(_tooltip_delay, ; if(cycle > _tooltip_last_mouse_move + _tooltip_delay-2 and _tooltip_pos = lib.gui.mouse_pos(level), _show_tooltip())),
	]
	)
	",

	on_paused: "set(mouseover, false); render()",

	on_click: "do_click()",

	timer_frequency: 10,
	on_timer: "_check_mouseover()",

	on_create: "[
		render();

		_check_mouseover()

	] where mouse_x = lib.gui.mouse_pos(level)[0]
	  where mouse_y = lib.gui.mouse_pos(level)[1]
	",

	on_type_updated: "render()",

	on_being_removed: "remove_object(_displayed_tooltip)",
}
