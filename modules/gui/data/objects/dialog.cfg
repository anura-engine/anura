{
	id: "dialog",
	is_strict: true,
	zorder: 5000,

	properties: {
		//derive from dialog and override this to add your child widgets.
		//You can spawn the child widgets and add them using add_widget()
		//to register them with the dialog.
		//Put them in the rectangle given by
		//[0,0,pane_width,pane_height]
		//They will have their co-ordinates normalized into the dialog.
		add_children: "def() ->commands null",

		title: { type: "null|string" },
		title_font_size: { type: "int", init: "lib.gui.py(32)" },
		close_buttons: { type: "[{text: string, on_click: null|function()->commands}]", default: [{text: "Close"}] },

		pane_x: "int :: mid_x - pane_width/2",
		pane_y: "int :: mid_y - pane_height/2",
		pane_width: { type: "int" },
		pane_height: { type: "int" },

		border_width: { type: "int", init: "lib.gui.py(12)" },

		top_border: "int :: border_width + if(title != null, title_font_size, 0)",
		bot_border: "int :: border_width + if(close_buttons, lib.gui.py(24), 0)",

		_width: "int :: border_width*2 + pane_width",
		_height: "int :: top_border + bot_border + pane_height",

		color_scheme: { type: "DialogColorScheme", init: "lib.gui.dialog_color_scheme" },

		is_modal: { type: "bool", default: true },
		_exclude_from_pause: { type: "[custom_obj]", default: [] },
		_paused_objects: { type: "[custom_obj]", default: [] },

		render: "def() ->commands
		set(animation, lib.gui.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_color(lib.gui.color_normalize(color_scheme.pane)),
			c.fill(),

			c.rectangle(0,0,ww,hh),
			c.set_line_width(2.0),
			c.set_source_color(lib.gui.color_normalize(color_scheme.border)),
			c.stroke(),

			if(title != null,
				map(fragments,
				[
					c.save(),
					c.translate(0, border_width/2),
					c.set_source_color(lib.gui.color_normalize(color_scheme.text)),
					value.path,
					c.fill(),
					c.restore(),
				]
				)
				where fragments = c.markup_text(sprintf(q(<font size='24' align='center'>%s</font>), title), { width: pane_width, scale: lib.gui.dpy(1.0) })
			),

//code to highlight the pane area in red if that is desired for debugging.
//			c.rectangle(border_width, top_border, pane_width, pane_height),
//			c.set_source_rgba(1.0,0.0,0.0,1.0),
//			c.fill(),
		]
		))
		where ww = _width
		where hh = _height
		where c = canvas()
		",

		_widgets: { type: "[custom_obj]", default: [] },

		last_widget: "custom_obj :: if(_widgets, _widgets[size(_widgets)-1], me)",

		add_widget: "def(custom_obj child) ->commands
		;
		[
			add(child.x, x + border_width),
			add(child.y, y + top_border),
			if(child not in level.chars, add_object(child)),
			if(child.zorder <= zorder, set(child.zorder, zorder+10)),
			add(_widgets, [child]),
		]
		",

		remove_widget: "def(null|custom_obj child_widget) ->commands
		;
		remove_object(child_widget);
		set(_widgets, filter(_widgets, value != child_widget))
		",

		close: "def() ->commands
			remove_object(me)
		",

		_add_close_buttons: "def() ->commands
			map(reverse(close_buttons),
				spawn('button_controller', {
					x: pane_width - button_width - (border_width + button_width)*index,
					y: pane_height + border_width/2,
					text: value.text,
					on_click: def()->commands me.close(); if(value.on_click, value.on_click()),
					button_width: button_width,
					button_height: button_height,
					_font_size: button_font_size,
					zorder: zorder+10,
				}, [
					add_widget(child)
				])
			)
			where button_width = lib.gui.py(50)
			where button_height = lib.gui.py(20)
			where button_font_size = lib.gui.py(14)
		",
	},

	events: {
		create: "
			let before_x = x;
			let before_y = y;
			if(is_modal, [[add(_paused_objects, [c]), set(c.paused, true)] | c <- level.chars, c != me, c not in _exclude_from_pause, not c.paused, c not in _widgets]);
			set(mid_xy, [lib.gui.screen_width/2, lib.gui.screen_height/2]);
			render();
			map(_widgets, [
				add(value.x, x - before_x),
				add(value.y, y - before_y),
			]);
			_add_close_buttons();
			add_children()
		",

		being_removed: "map(_widgets, remove_object(value)); map(_paused_objects, set(value.paused, false))",

	},
}
