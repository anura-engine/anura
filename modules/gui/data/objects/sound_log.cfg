{
	id: "sound_log",
	is_strict: true,
	hidden_in_game: true,
	always_active: true,

	properties: {
		_volumes: { type: "[{ entry: obj slider_widget, fname: string }]", default: [] },
		_delays: { type: "[{ entry: obj text_entry, fname: string }]", default: [] },

		_update_entries: "def() ->commands [
			map(_volumes, set(value.entry.slider_value, lib.sound.sound_volume(value.fname)); value.entry.render()),
			map(_delays, set(value.entry.text, str(lib.sound.sound_delay(value.fname)))),
		]",

		_suppress_logging: { type: "int", default: 0 },
		add_entry: "def(custom_obj obj, string sound_name, string|null fname) ->commands
		;
		if(_suppress_logging = 0,
			let new_ypos = sum(map(filter(pane.elements, value.xpos = null), value.obj.img_h));
			spawn('label', {
				_text: ['Play ' + sound_name + ' -> ' + if(fname is string, fname, '(none)')],
				_font_size: lib.gui.py(12),
				_bg_color: [0,0,0,0.8],
				zorder: 20000,
			}, [
				remove_object(child);
				add(pane.elements, [{ obj: child, ypos: new_ypos}])
			]);

			if(fname != null, [

				spawn('slider_widget', {
					slider_value: lib.sound.sound_volume(fname),
					slider_width: lib.gui.py(46),
					slider_height: lib.gui.py(14),
					value_change_handler: (def(decimal val) ->commands
						if((level.player.ctrl_mod_key%4) != 0, // shift is held
							map(lib.sound.sound_choices(sound_name), lib.sound.set_sound_volume(value, val)),
							lib.sound.set_sound_volume(fname, val)
						);
						_update_entries()
					),
				}, [
					remove_object(child);
					add(pane.elements, [{ obj: child, xpos: lib.gui.py(470), ypos: new_ypos }]);
					add(_volumes, [{entry: child, fname: fname}])
				]),

				spawn('text_entry', {
					text: str(lib.sound.sound_delay(fname)),
					font_size: lib.gui.py(12),
					_width: lib.gui.py(26),
					_height: lib.gui.py(22),
					_on_enter_arg: (def(obj text_entry entry) ->commands
						handle_errors(
							lib.sound.set_sound_delay_seconds(fname, num)
								where num = decimal<- eval(entry.text);
							set(entry.has_focus, false),
							null
						);

						_update_entries()
					),
				}, [
					remove_object(child);
					add(pane.elements, [{ obj: child, xpos: lib.gui.py(530), ypos: new_ypos }]);
					add(_delays, [{entry: child, fname: fname}])
				]),

				spawn('button_controller', {
					text: 'Play',
					button_width: lib.gui.py(30),
					button_height: lib.gui.py(15),
					_font_size: lib.gui.py(10),
					sound_mouseover: null,
					sound_mouseoff: null,
					sound_mouseclick: null,
					on_click: (def() ->commands add(me._suppress_logging, 1); lib.sound.play_sound(me, fname); add(me._suppress_logging, -1)),
				}, [
					remove_object(child);
					add(pane.elements, [{ obj: child, xpos: lib.gui.py(570), ypos: new_ypos }])
				])
			]);

			pane.force_to_bottom();
			pane.recalculate()
		)
		",

		pane: "obj scrollable_pane <- _pane",
		_pane: { type: "null|obj scrollable_pane" },
	},

	on_create: "
		spawn('scrollable_pane', {
			x: lib.gui.py(20),
			y: lib.gui.py(20),
			area_width: lib.gui.py(600),
			area_height: lib.gui.py(200),
			hide_scrollbar_on_mouse_off: true,
			elements: [],
			zorder: 20000,
		}, [
			set(_pane, child),
		])
	",
}
