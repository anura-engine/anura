{
	id: "notification_toast",
	is_strict: true,
	always_active: true,

	zorder: 100000,

	properties: {
		_font_size: { type: "int", init: "lib.gui.py(18)" },

		_duration: { type: "int", default: 240 },

		_width: { type: "int", init: "lib.gui.py(200)" },

		_border: { type: "int", init: "lib.gui.py(8)" },

		target_y: { type: "int", default: 0, set: "if(_data != value, [set(_data, value), fire_event('animate_toast')])" },

		_height: "int :: int(max(map(fragments, value.y + value.height)) or 0) + _border*2 + if(_options, lib.gui.py(24), 0)
		
		 where fragments = c.markup_text(_marked_up_text, _width - _border*2)
		 where c = canvas()",

		_text: { type: "string" },
		_marked_up_text: "string :: q(<font size=') + _font_size + q('>) + _text + q(</font>)",

		_on_click: { type: "commands" },

		_options: { type: "[{ text: string, on_click: function()->commands, button: null|obj button_controller }]", default: [] },

		render: "def(int ww, int hh) ->commands [
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [
				c.rectangle(0, 0, ww, hh),
				c.set_source_rgba(0.2, 0.2, 0.2, 1.0),
				c.fill(),

				c.save(),
				c.translate(_border, _border),

				c.set_source_rgba(1.0, 1.0, 1.0, 1.0),

				map(fragments,
				[
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]),

				c.restore(),
			] where fragments = c.markup_text(_marked_up_text, _width - _border*2)
			)
			  where c = canvas(),
		})
		]",
	},

	on_click: "_on_click",

	on_create: "[
		render(_width, _height),
		set(x, level.dimensions[2] - _width - _border),
		set(y, -_height),

		fire_event('animate_toast'),
		schedule(_duration, fire_event('fade_out')),

		[add(t.target_y, _height + lib.gui.py(8)) | t <- level.chars, t is obj notification_toast, t != me],
	];
	map(_options, spawn('button_controller', {
		x: 0,
		mid_y: 0,
		button_width: lib.gui.py(60),
		button_height: lib.gui.py(20),
		_font_size: lib.gui.py(14),
		text: value.text,
		on_click: def()->commands [remove_object(me), value.on_click()],
		zorder: me.zorder+1,
		color_scheme: lib.gui.library_color_scheme,
	}, [
		set(_options[index].button, child),
	]))",

	on_process: "[
		map(_options, if(value.button, [
			set(value.button.mid_y, y + img_h - lib.gui.py(18)),
			set(value.button.x, int(mix(left, right, if(size(_options) = 1, 0.5, index / (size(_options)-1))) - lib.gui.py(60)/2)),
		]))
		where left = mid_x - _width/4
		where right = mid_x + _width/4
	]",

	on_being_removed: "map(_options, remove_object(value.button))",

	on_animate_toast: "[
		animate(me, {
			y: target_y + _border,
		}, {
			duration: 20
		})
	]",

	on_fade_out: "[
		animate(me, {
			alpha: 0,
		}, {
			name: 'move_to_place',
			replace_existing: true,
			duration: 20,
			on_complete: remove_object(me),
		})
	]",
}
