{
	id: "game_icon",
	is_strict: true,
	always_active: true,

	properties: {
		size: { default: 512.0, set: "[invalidate(), set(_data, value)]" },
		scaling: { type: "decimal", get: "size/512.0", set: "[invalidate(), set(size, 512*value)]", variable: false },
		rotation: { type: "decimal", set: "[invalidate(), set(_data, value)]", default: 0.0 },
		icon: { type: "string", set: "[
			if(_data != value, invalidate()),
			set(_data, value),
		]" },

		draw_circle: {
			type: "bool",
			default: false,
			set: "[invalidate(), set(_data, value)]",
		},

		circle_radius: { default: 0.48 },

		invalidate: "def() ->commands set(me._dirty, true)",

		_dirty: false,

		user_info: { type: "any" },

		_update_canvas: "def() ->commands [

		set(animation, {
			id: 'svg',
			image: 'svg',
			fbo: c.render(int(scaling*512), int(scaling*512),
			[
				c.save(),
			] +
			
			if(rotation = 0, [], [ c.translate(scaling*512/2.0, scaling*512/2.0), c.rotate(rotation), c.translate(-scaling*512/2.0, -scaling*512/2.0)]) +

			if(draw_circle, [
				c.translate(128*scaling, 128*scaling),
				c.scale(scaling/2, scaling/2)
			], [
				c.scale(scaling,scaling),
			]) +

			[
				c.draw_svg('images/icons/' + icon, 512, 512),
				c.restore(),
			] + if(draw_circle, [
				c.arc(scaling*512/2, scaling*512/2, scaling*512*circle_radius, 0, 2*3.15),
				c.set_line_width(1.5),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),
			],
			[])) where c = canvas(),
			x: 0,
			y: 0,
			w: int(scaling*512),
			h: int(scaling*512),
			scale: 1.0,
			frames: 1,
			duration: -1,
		}),
		set(me._dirty, false)
		]
		
		",
	},

	on_process: "if(_dirty, _update_canvas())",

	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	},
}
