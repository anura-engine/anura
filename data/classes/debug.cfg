//Debug assist functions.
{
	types: {
		AOTree: "{indent:int, key:any, value:any}|[{indent:int, key:any, value:any}]",
		AOTItem: "{indent:int, key:any, value:any}",
	},
	//Pretty-print function, useful on the console to dig into data structures containing objects.
	pp: "def(any val)->commands debug(
		'\n\n==================\nBEGIN OUTPUT BLOCK\n==================\n\n' 
		+ _serialize_aot_item(_abstract_object_tree(val))
		)",
	
	_abstract_object_tree: "def(any val, int indent=0, map seen={}) -> {indent:int, key:any, value:any}|[{indent:int, key:any, value:any}]
	if(indent < max_tree_depth,
		if(
			(not seen[val]) and (val is custom_obj or val is map or val is level),
			[{
				indent: indent, 
				key: key,
				value: _abstract_object_tree(val[key], indent+1, seen + {(val):true}),
			} | key <- if('type' in keys and 'animation' in keys and 'xy' in keys, 
					['type', 'animation', 'xy'] + keys, 
					keys
				) where keys = sort(keys(custom_obj|map|level<-val))
			],
			if(val is list and not seen[val], 
				map(val, {
					indent: indent,
					key: index,
					value: _abstract_object_tree(value, indent+1, seen + {(val):true}),
				}),
				if(not seen[val], 
					{ //Not an iterable thing, we guess.
						indent: indent,
						key: null,
						value: val,
					},
					{ // seen?
						indent: indent,
						key: null,
						value: typeof(val),
					}
				)
			)
		),
		{
			indent: indent, 
			key: null,
			value: '<<<error: structure inspector max_tree_depth reached, can not look deeper - increase in the debug.cfg class>>>',
		}
	) where max_tree_depth = 5",
	
	_serialize_aot_item: "overload(
		def({indent:int, key:any, value:any} item) -> string
			if(item.key != null, 
				fold([' ']*4*item.indent, a+b) + str(item.key) + ': ', 
				'' ) 
			+ if(item.value is {indent: int, key: any, value: any},
				_serialize_aot_item(item.value),
				if(item.value is list,
					//single-line int list view, covers Points.
					if(size(item.value) and size(item.value) <= 10  and item.value is [{indent: int, key: any, value: {indent: int, key: null, value: int}}],
						//One-line lists/objects.
						'(' + fold(map(([{indent:int, key:any, value:{indent:int, key:any, value:decimal}}] <- item.value), 
							str(value.value.value)), a+','+b) + ')',
						if(not size(item.value), 
							//Empty list/object.
							'(empty)',
							//Long lists/objects which are split over many lines.
							'(\n' + fold(map(
								item.value[0:list_display_size], //Display less the deeper we are.
								_serialize_aot_item({indent:int, key:any, value:any} <- value)
							), a+'\n'+b) 
							+ '\n'+ fold([' ']*4*item.indent, a+b) +')'
							+ if(size(item.value) - list_display_size <= 0, 
								'', 
								' plus ' + str(size(item.value) - list_display_size) + ' more items'
							)
						) where list_display_size = ({0:10, 1:5, 2: 3, 3:0}[item.indent]),
					),
					str(item.value),
				),
			),
		def([{indent:int, key:any, value:any}] tree) -> string 
			fold([string]<-map(tree, _serialize_aot_item(value)), str(a)+'\n'+str(b))
	)",
	
	/* Add to above if line-trimming becomes needed.
	if(size(item_line) <= 80, 
		item_line, 
		item_line[0:79]+'â€¦'
	) where item_line = 'foo'
	*/
	
}