{
	shaders: {
		vertex: {
			simple_v: "
			uniform mat4 mvp_matrix;
			attribute vec4 a_position;
			void main() {
				gl_Position = mvp_matrix * a_position;
			}
			",
		},
			
		fragment: {
			simple_f: "
				void main() {
					gl_FragColor = vec4(0.0, 0.0, 0.0, 0.25);
				}
			",
		},
	},

	programs: [{
		name: "mycircle",
		vertex: "simple_v",
		fragment: "simple_f",
		attributes: {
			vertex: "a_position"
		},
		uniforms: {
			mvp_matrix: "mvp_matrix",
		}
	}],

	instances: [
	{
		name: "lighted_texture_shader",
		//comment: "Texture shader with single light, normals are supplied as a uniform",
		new: true,
		vertex: "
			#version 120

			// Input vertex data, different for all executions of this shader.
			attribute vec3 vertexPosition_modelspace;
			attribute vec2 a_tex_coord;

			// Output data ; will be interpolated for each fragment.
			varying vec2 UV;
			varying vec3 Position_worldspace;
			varying vec3 Normal_cameraspace;
			varying vec3 EyeDirection_cameraspace;
			varying vec3 LightDirection_cameraspace;

			// Values that stay constant for the whole mesh.
			uniform mat4 MVP;
			uniform mat4 V;
			uniform mat4 M;
			uniform vec3 LightPosition_worldspace;
			// for an arbitrary mesh this should be an attribute
			// for cubes this can be a uniform
			uniform vec3 vertexNormal_modelspace;

			void main(){

				// Output position of the vertex, in clip space : MVP * position
				gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
				
				// Position of the vertex, in worldspace : M * position
				Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
				
				// Vector that goes from the vertex to the camera, in camera space.
				// In camera space, the camera is at the origin (0,0,0).
				vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
				EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

				// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
				vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
				LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
				
				// Normal of the the vertex, in camera space
				Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
				
				// UV of the vertex. No special space for this one.
				UV = a_tex_coord;
			}
		",
		fragment: "
			#version 120

			// Interpolated values from the vertex shaders
			varying vec2 UV;
			varying vec3 Position_worldspace;
			varying vec3 Normal_cameraspace;
			varying vec3 EyeDirection_cameraspace;
			varying vec3 LightDirection_cameraspace;

			// Values that stay constant for the whole mesh.
			uniform sampler2D u_tex0;
			uniform vec3 LightPosition_worldspace;
			uniform float Shininess;
			uniform float Gamma;
			uniform float LightPower;

			void main(){
				// Light emission properties
				// You probably want to put them as uniforms
				vec3 LightColor = vec3(1,1,1);
				
				// Material properties
				vec4 MaterialDiffuseColor = texture2D( u_tex0, UV );
				if(MaterialDiffuseColor.a < 0.1) {
					discard;
				}
				vec3 MaterialAmbientColor = vec3(0.2,0.2,0.2) * MaterialDiffuseColor.rgb;
				vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

				// Distance to the light
				float distance = length( LightPosition_worldspace - Position_worldspace );

				// Normal of the computed fragment, in camera space
				vec3 n = normalize( Normal_cameraspace );
				// Direction of the light (from the fragment to the light)
				vec3 l = normalize( LightDirection_cameraspace );
				// Cosine of the angle between the normal and the light direction, 
				// clamped above 0
				//  - light is at the vertical of the triangle -> 1
				//  - light is perpendicular to the triangle -> 0
				//  - light is behind the triangle -> 0
				float cosTheta = clamp( dot( n,l ), 0.0, 1.0);
				
				// Eye vector (towards the camera)
				vec3 E = normalize(EyeDirection_cameraspace);
				// Direction in which the triangle reflects the light
				vec3 R = reflect(-l,n);
				// Cosine of the angle between the Eye vector and the Reflect vector,
				// clamped to 0
				//  - Looking into the reflection -> 1
				//  - Looking elsewhere -> < 1
				float cosAlpha = clamp( dot( E,R ), 0.0,1.0 );
				
				vec3 color = 
					// Ambient : simulates indirect lighting
					MaterialAmbientColor +
					// Diffuse : 'color' of the object
					MaterialDiffuseColor.rgb * LightColor * LightPower * cosTheta / (distance*distance) +
					// Specular : reflective highlight, like a mirror
					MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,Shininess) / (distance*distance);
				gl_FragColor = vec4(pow(color,vec3(1.0/Gamma)), MaterialDiffuseColor.a);
			}			
		",
		attributes: {
			vertex: "vertexPosition_modelspace",
			texcoord: "a_tex_coord",
		},
		uniforms: {
			mvp_matrix: "MVP",
			m_matrix: "M",
			v_matrix: "V",
			light_position: "LightPosition_worldspace",
			light_power: "LightPower",
			shininess: "Shininess",
			gamma: "Gamma",
			texture: "u_tex0",
			normal: "vertexNormal_modelspace",
		}
		
	}, {
		name: "lighted_color_shader",
		new: true,
		//comment: "Colored shader with single light, normals are supplied as a uniform",
		vertex: "
			#version 120

			// Input vertex data, different for all executions of this shader.
			attribute vec3 a_position;
			uniform vec3 u_normal;
			attribute vec4 a_color;

			// Output data ; will be interpolated for each fragment.
			varying vec3 Position_worldspace;
			varying vec3 Normal_cameraspace;
			varying vec3 EyeDirection_cameraspace;
			varying vec3 LightDirection_cameraspace;
			varying vec4 MaterialDiffuseColor;

			// Values that stay constant for the whole mesh.
			uniform mat4 mvp_matrix;
			uniform mat4 v_matrix;
			uniform mat4 m_matrix;
			uniform mat4 n_matrix;
			uniform vec3 LightPosition_worldspace;

			void main(){

				// Output position of the vertex, in clip space : mvp_matrix * position
				gl_Position =  mvp_matrix * vec4(a_position,1);
				
				// Position of the vertex, in worldspace : m_matrix * position
				Position_worldspace = (m_matrix * vec4(a_position,1)).xyz;
				
				// Vector that goes from the vertex to the camera, in camera space.
				// In camera space, the camera is at the origin (0,0,0).
				vec3 vertexPosition_cameraspace = ( v_matrix * m_matrix * vec4(a_position,1)).xyz;
				EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

				// Vector that goes from the vertex to the light, in camera space. m_matrix is ommited because it's identity.
				vec3 LightPosition_cameraspace = ( v_matrix * vec4(LightPosition_worldspace,0)).xyz;
				LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
				
				// Normal of the the vertex, in camera space
				Normal_cameraspace = ( n_matrix * vec4(u_normal,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
				
				MaterialDiffuseColor = a_color;
			}
		",
		fragment: "
			#version 120

			// Interpolated values from the vertex shaders
			varying vec3 Position_worldspace;
			varying vec3 Normal_cameraspace;
			varying vec3 EyeDirection_cameraspace;
			varying vec3 LightDirection_cameraspace;
			varying vec4 MaterialDiffuseColor;

			// Values that stay constant for the whole mesh.
			uniform vec3 LightPosition_worldspace;
			uniform float LightPower;
			uniform float Shininess;
			uniform float Gamma;
			uniform vec3 MaterialAmbientColor;
			uniform vec3 MaterialSpecularColor;
			uniform vec3 LightColor;

			struct SimpleDirectionalLight {
			   vec4 vColor;
			   vec3 vDirection;
			   float fAmbientIntensity;
			};
			uniform SimpleDirectionalLight sunlight; 
			
			void main(){
				if(MaterialDiffuseColor.a < 0.1) {
					discard;
				}
			
				// Distance to the light
				float distance = length( LightPosition_worldspace - Position_worldspace );

				// Normal of the computed fragment, in camera space
				vec3 n = normalize( Normal_cameraspace );
				// Direction of the light (from the fragment to the light)
				vec3 l = normalize( LightDirection_cameraspace );
				// Cosine of the angle between the normal and the light direction, 
				// clamped above 0
				//  - light is at the vertical of the triangle -> 1
				//  - light is perpendicular to the triangle -> 0
				//  - light is behind the triangle -> 0
				float cosTheta = clamp( dot( n,l ), 0.0,1.0 );
				
				float fDiffuseIntensity = max(0.0, dot(n, -sunlight.vDirection)); 
				
				// Eye vector (towards the camera)
				vec3 E = normalize(EyeDirection_cameraspace);
				// Direction in which the triangle reflects the light
				vec3 R = reflect(-l,n);
				// Cosine of the angle between the Eye vector and the Reflect vector,
				// clamped to 0
				//  - Looking into the reflection -> 1
				//  - Looking elsewhere -> < 1
				float cosAlpha = clamp( dot( E,R ), 0.0,1.0 );
				
				vec3 color = 
					// Ambient : simulates indirect lighting
					MaterialAmbientColor * MaterialDiffuseColor.rgb
					// Diffuse : 'color' of the object
					+ MaterialDiffuseColor.rgb * LightColor * LightPower * cosTheta / (distance*distance)
					// Specular : reflective highlight, like a mirror
					+ MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,Shininess) / (distance*distance);
				color *= sunlight.vColor.rgb*(sunlight.fAmbientIntensity+fDiffuseIntensity);
				gl_FragColor = vec4(pow(color,vec3(1.0/Gamma)), MaterialDiffuseColor.a);
			}			
		",
		attributes: {
			vertex: "a_position",
			color: "a_color",
		},
		uniforms: {
			mvp_matrix: "mvp_matrix",
			m_matrix: "m_matrix",
			v_matrix: "v_matrix",
			normal_matrix: "n_matrix",
			light_position: "LightPosition_worldspace",
			light_power: "LightPower",
			shininess: "Shininess",
			gamma: "Gamma",
			normal: "u_normal",
			ambient_color: "MaterialAmbientColor",
			specular_color: "MaterialSpecularColor",
			light_color: "LightColor",
		}
	}, {
		name: "iso_color_line",
		new: true,
		vertex: "
			#version 120

			// Input vertex data, different for all executions of this shader.
			attribute vec3 a_position;
			attribute vec3 a_normal;
			attribute vec4 a_color;

			// Output data ; will be interpolated for each fragment.
			varying vec3 Position_worldspace;
			varying vec3 Normal_cameraspace;
			varying vec3 EyeDirection_cameraspace;
			varying vec3 LightDirection_cameraspace;
			varying vec4 MaterialDiffuseColor;

			// Values that stay constant for the whole mesh.
			uniform mat4 mvp_matrix;
			uniform mat4 v_matrix;
			uniform mat4 m_matrix;
			uniform vec3 LightPosition_worldspace;

			void main(){

				// Output position of the vertex, in clip space : mvp_matrix * position
				gl_Position =  mvp_matrix * vec4(a_position,1);
				
				// Position of the vertex, in worldspace : m_matrix * position
				Position_worldspace = (m_matrix * vec4(a_position,1)).xyz;
				
				// Vector that goes from the vertex to the camera, in camera space.
				// In camera space, the camera is at the origin (0,0,0).
				vec3 vertexPosition_cameraspace = ( v_matrix * m_matrix * vec4(a_position,1)).xyz;
				EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

				// Vector that goes from the vertex to the light, in camera space. m_matrix is ommited because it's identity.
				vec3 LightPosition_cameraspace = ( v_matrix * vec4(LightPosition_worldspace,0)).xyz;
				LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
				
				// Normal of the the vertex, in camera space
				Normal_cameraspace = ( v_matrix * m_matrix * vec4(a_normal,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
				
				MaterialDiffuseColor = a_color;
			}
		",
		fragment: "
			#version 120

			// Interpolated values from the vertex shaders
			varying vec3 Position_worldspace;
			varying vec3 Normal_cameraspace;
			varying vec3 EyeDirection_cameraspace;
			varying vec3 LightDirection_cameraspace;
			varying vec4 MaterialDiffuseColor;

			// Values that stay constant for the whole mesh.
			uniform vec3 LightPosition_worldspace;
			uniform float LightPower;
			uniform float Shininess;

			void main(){
				vec3 LightColor = vec3(1,1,1);
				vec3 MaterialAmbientColor = vec3(0.4, 0.4, 0.4) * MaterialDiffuseColor.rgb;
				vec3 MaterialSpecularColor = vec3(0.1, 0.1, 0.1);
				
				// Distance to the light
				float distance = length( LightPosition_worldspace - Position_worldspace );

				// Normal of the computed fragment, in camera space
				vec3 n = normalize( Normal_cameraspace );
				// Direction of the light (from the fragment to the light)
				vec3 l = normalize( LightDirection_cameraspace );
				// Cosine of the angle between the normal and the light direction, 
				// clamped above 0
				//  - light is at the vertical of the triangle -> 1
				//  - light is perpendicular to the triangle -> 0
				//  - light is behind the triangle -> 0
				float cosTheta = clamp( dot( n,l ), 0.0,1.0 );
				
				// Eye vector (towards the camera)
				vec3 E = normalize(EyeDirection_cameraspace);
				// Direction in which the triangle reflects the light
				vec3 R = reflect(-l,n);
				// Cosine of the angle between the Eye vector and the Reflect vector,
				// clamped to 0
				//  - Looking into the reflection -> 1
				//  - Looking elsewhere -> < 1
				float cosAlpha = clamp( dot( E,R ), 0.0,1.0 );
				
				gl_FragColor.rgb = 
					// Ambient : simulates indirect lighting
					MaterialAmbientColor +
					// Diffuse : 'color' of the object
					MaterialDiffuseColor.rgb * LightColor * LightPower * cosTheta / (distance*distance);// +
					// Specular : reflective highlight, like a mirror
					//MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,Shininess) / (distance*distance);
				gl_FragColor.a = MaterialDiffuseColor.a;
			}			
		",
		attributes: {
			vertex: "a_position",
			color: "a_color",
		},
		uniforms: {
			mvp_matrix: "mvp_matrix",
		}
	}, {
		name: "line_3d",
		comment: "Single color line shader, used in editor and draw_primitive",
		new: true,
		vertex: "
			uniform mat4 mvp_matrix;
			attribute vec3 a_position;
			void main() {
				gl_Position = mvp_matrix * vec4(a_position, 1.0);
			}
		",
		fragment: "
			uniform vec4 u_color;
			void main() {
				gl_FragColor = u_color;
			}
		",
		uniforms: {
			mvp_matrix: "mvp_matrix",
			color: "u_color",
		},
		attributes: {
			vertex: "a_position",
		},
	}, {
		name: "test_line_3d",
		comment: "Single color line shader, for testing in iso module",
		new: true,
		vertex: "
			uniform mat4 mvp_matrix;
			attribute vec3 a_position;
			attribute vec3 a_normal;
			attribute vec4 a_color;
			varying vec4 v_color;
			void main() {
				gl_Position = mvp_matrix * vec4(a_position, 1.0);
				v_color = a_color;
			}
		",
		fragment: "
			varying vec4 v_color;
			void main() {
				gl_FragColor = v_color;
			}
		",
		uniforms: {
			mvp_matrix: "mvp_matrix",
		},
		attributes: {
			vertex: "a_position",
			normal: "a_normal",
			color: "a_color",
		},
	}, {
		name: "texture2d",
		new: true,
		vertex: "
			attribute vec2 a_position;
			attribute vec2 a_texcoord;			
			varying vec2 v_texcoord;
			uniform mat4 mvp_matrix;
			void main() {
				v_texcoord = a_texcoord;
				gl_Position = mvp_matrix * vec4(a_position,0.0,1.0);
			}",
		fragment: "
			uniform sampler2D u_tex_map;
			varying vec2 v_texcoord;
			void main() {
				gl_FragColor = texture2D(u_tex_map, v_texcoord);
			}",
		uniforms: {
			mvp_matrix: "mvp_matrix",
		},
		attributes: {
			vertex: "a_position",
			texcoord: "a_texcoord",
		},
	}, {
		name: "skybox1",
		new: true,
		vertex: "
			#version 120
			attribute vec3 a_position;
			uniform mat4 mv_inverse_matrix;
			uniform mat4 p_inverse_matrix;
			varying vec3 vertOutTexCoords;
			void main() {
				vec4 v = mv_inverse_matrix * p_inverse_matrix * vec4(a_position,1.0);
				vertOutTexCoords = v.xyz;
				gl_Position = vec4(a_position,1.0);
			}",
		fragment: "
			#version 120
			uniform samplerCube u_tex_map;
			uniform vec4 u_color;
			varying vec3 vertOutTexCoords;
			void main() {
				gl_FragColor = textureCube(u_tex_map, vertOutTexCoords) * u_color;
			}",
		uniforms: {
			mv_inverse_matrix: "mv_inverse_matrix",
			p_inverse_matrix: "p_inverse_matrix",
			texture_map: "u_tex_map",
			color: "u_color",
		},
		attributes: {
			vertex: "a_position",
			normal: "a_normal",
		},
	}, {
		name: "texture_2d_lighted",
		new: true,
		vertex: "
			attribute vec2 a_position;
			attribute vec2 a_texcoord;			
			varying vec2 v_texcoord;
			uniform mat4 mvp_matrix;
			void main() {
				v_texcoord = a_texcoord;
				gl_Position = mvp_matrix * vec4(a_position,0.0,1.0);
			}",
		fragment: "
			uniform sampler2D u_tex_map;
			uniform sampler2D u_normal_map;
			
			#define MAX_2D_LIGHTS	(1)
			
			uniform bool light_enabled[MAX_2D_LIGHTS];
			uniform vec3 light_position[MAX_2D_LIGHTS];
			uniform vec3 ambientColor[MAX_2D_LIGHTS];
			uniform float ambientIntensity[MAX_2D_LIGHTS];
			uniform vec3 lightColor[MAX_2D_LIGHTS];
			uniform vec2 resolution;
			
			varying vec2 v_texcoord;
			void main() {
				 vec4 color = texture2D(u_tex_map, v_texcoord);
				 vec3 nColor = texture2D(u_normal_map, v_texcoord).rgb;
				 
				 //normals need to be converted to [-1.0, 1.0] range and normalized
				 vec3 normal = normalize(nColor * 2.0 - 1.0);
				 
				 vec3 light_sum = vec3(0.0,0.0,0.0);
				 for(int i = 0; i != MAX_2D_LIGHTS; ++i) {
					if(light_enabled[i]) {
						vec3 deltaPos = vec3((light_position[i].xy - gl_FragCoord.xy) / resolution.xy, light_position[i].z);
				 
						vec3 lightDir = normalize(deltaPos);
						float lambert = clamp(dot(normal, lightDir), 0.0, 1.0);
				 
						light_sum += (ambientColor[i] * ambientIntensity[i]) + (lightColor[i].rgb * lambert);
					}
				}

				gl_FragColor = vec4(light_sum * color.rgb, color.a);
			}",
		uniforms: {
			mvp_matrix: "mvp_matrix",
			light_position: "light_position",
			ambient_color: "ambientColor",
			ambient_intensity: "ambientIntensity",
			light_color: "lightColor",
			resolution: "resolution",
			tex_map: "u_tex_map",
			normal_map: "u_normal_map",
			enabled: "light_enabled",
		},
		attributes: {
			vertex: "a_position",
			texcoord: "a_texcoord",
		},
	}, {
		name: "psystem_shader",
		new: true,
		vertex: "
			#version 120
			attribute vec3 a_position;
			attribute vec4 a_color;
			attribute vec3 a_dimensions;
			uniform mat4 u_mvp_matrix;
			varying vec4 v_color;
			void main() {			
				v_color = a_color;
				gl_PointSize = 33.3 * a_dimensions.x;
				gl_Position = u_mvp_matrix * vec4(a_position, 1.0);
			}
		",
		fragment: "
			#version 120
			uniform sampler2D u_texture;
			varying vec4 v_color;
			void main() {				
				gl_FragColor = v_color * texture2D(u_texture, gl_PointCoord);
			}
		",
		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			texture: "u_texture",
		},
		attributes: {
			vertex: "a_position",
			color: "a_color",
			dimensions: "a_dimensions",
		},
	}, {
		name: "yuv12",
		new: true,
		vertex: "
			#version 120
			attribute vec2 a_position;
			attribute vec2 a_texcoord;
			uniform mat4 u_mvp_matrix;
			varying vec2 v_texcoord;
			void main() {			
				gl_Position = u_mvp_matrix * vec4(a_position, 0.0, 1.0);
				v_texcoord = a_texcoord;
			}
		",
		// Sam Lantinga YUV12 -> RGB conversion shader.
		fragment: "
			#version 120
			uniform vec4 u_color;
			uniform sampler2D u_tex0;
			uniform sampler2D u_tex1;
			uniform sampler2D u_tex2;
			varying vec2 v_texcoord;
			
			// YUV offset 
			const vec3 offset = vec3(-0.0625, -0.5, -0.5);

			// RGB coefficients 
			const vec3 Rcoeff = vec3(1.164,  0.000,  1.596);
			const vec3 Gcoeff = vec3(1.164, -0.391, -0.813);
			const vec3 Bcoeff = vec3(1.164,  2.018,  0.000);
			
			void main() {				
				vec3 yuv;

				// Get the Y value
				yuv.x = texture2D(u_tex0, v_texcoord).r;

				// Get the U and V values
				yuv.y = texture2D(u_tex1, v_texcoord).r;
				yuv.z = texture2D(u_tex2, v_texcoord).r;

				// Do the color transform
				yuv += offset;
				vec3 rgb = vec3(dot(yuv, Rcoeff), dot(yuv, Gcoeff), dot(yuv, Bcoeff));

                rgb = clamp(rgb, vec3(0.0,0.0,0.0), vec3(1.0,1.0,1.0));
                
				// That was easy. :)
				gl_FragColor = vec4(rgb, 1.0) * u_color;
			}
		",
		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			color: "u_color",
			tex0: "u_tex0",
			tex1: "u_tex1",
			tex2: "u_tex2",
		},
		attributes: {
			vertex: "a_position",
			texcoord: "a_texcoord",
		},
	}, {
		name: "marching_ants",
		new: true,
		vertex: " // minimal, functional vertex shader
			#version 120
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			#version 120
			uniform sampler2D u_anura_tex_map;
			uniform float u_anura_cycle;
			varying vec2 v_texcoord;
			uniform vec4 u_box; //x1y1x2y2 ... as measured from the bottom-right.
			
			//uniform vec4 u_anura_draw_area;
			//varying vec2 v_vertex;
			
			const float screen_width = 800; //TODO: pass this in
			const float screen_height = 600;
			vec4 corrected_u_box = vec4(u_box[0], screen_height-u_box[1], u_box[2], screen_height-u_box[3]); //measure from upper-right, not lower-right
			
			const float line_thickness = 2;
			const float dash_width = 100;
			const float dash_speed = 4;
			
			const float half_px_width =  line_thickness/2/screen_width;
			const float half_px_height = line_thickness/2/screen_height;
			
			vec4 box_real = corrected_u_box / vec4(screen_width, screen_height, screen_width, screen_height);
			vec4 box_inner = box_real + vec4(+half_px_width, +half_px_height, -half_px_width, -half_px_height);
			vec4 box_outer = box_real + vec4(-half_px_width, -half_px_height, +half_px_width, +half_px_height);
			
			bool on_left_line    = v_texcoord[0] <= box_inner[0] && v_texcoord[0] > box_outer[0];
			bool on_top_line     = v_texcoord[1] <= box_inner[1] && v_texcoord[1] > box_outer[1];
			bool on_right_line   = v_texcoord[0] >= box_inner[2] && v_texcoord[0] < box_outer[2];
			bool on_bottom_line  = v_texcoord[1] >= box_inner[3] && v_texcoord[1] < box_outer[3];
			bool in_box = v_texcoord[0] >= box_outer[0] 
			           && v_texcoord[1] <= box_inner[1] 
			           && v_texcoord[0] <= box_outer[2]
			           && v_texcoord[1] >= box_inner[3];
			
			void main() {
				if(!in_box || !(on_right_line || on_left_line || on_top_line || on_bottom_line)) {
					gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
				} else {
					// This if should paint half the box white, but it doesn't. I believe we're adding box x to texcoord x, putting that in pixells, and comparing the the same for y to try and determine which half of the box we're on.
					float intensity = ((box_real[0] + box_real[2])/2 - v_texcoord[0]) * screen_width 
						            < ((box_real[1] + box_real[3])/2 - v_texcoord[1]) * screen_height
						? mod(u_anura_cycle*dash_speed + v_texcoord[0]*screen_width + v_texcoord[1]*screen_height, dash_width*2) / dash_width
						: mod(u_anura_cycle*dash_speed - v_texcoord[0]*screen_width - v_texcoord[1]*screen_height, dash_width*2) / dash_width;
					intensity = 1-intensity;
					gl_FragColor = vec4(intensity*0.8,intensity*1.0,intensity*0.8, 1); //green coloured white dashes
				}
			}
		",
	}],

}
